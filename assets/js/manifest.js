// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
(function() {
  'use strict';

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const CONFIG = {
    swPath: '/service-worker.js', // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ SW –≤ –∫–æ—Ä–µ–Ω—å!
    scope: '/',
    registrationTimeout: 10000
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  function canRegisterServiceWorker() {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º
    if (!('serviceWorker' in navigator)) {
      console.warn('‚ö†Ô∏è Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
      return false;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (—Ç–æ–ª—å–∫–æ HTTPS –∏–ª–∏ localhost)
    const isLocalhost = window.location.hostname === 'localhost' || 
                        window.location.hostname === '127.0.0.1';
    const isHttps = window.location.protocol === 'https:';
    
    if (!isHttps && !isLocalhost) {
      console.warn('‚ö†Ô∏è Service Worker —Ç—Ä–µ–±—É–µ—Ç HTTPS –∏–ª–∏ localhost. –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª:', window.location.protocol);
      return false;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ file:// –ø—Ä–æ—Ç–æ–∫–æ–ª
    if (window.location.protocol === 'file:') {
      console.warn('‚ö†Ô∏è Service Worker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å file:// –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.');
      return false;
    }

    return true;
  }

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker
  async function registerServiceWorker() {
    if (!canRegisterServiceWorker()) {
      return;
    }

    try {
      // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (document.readyState === 'loading') {
        await new Promise(resolve => window.addEventListener('load', resolve));
      }

      // console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker...');

      const registration = await Promise.race([
        navigator.serviceWorker.register(CONFIG.swPath, { scope: CONFIG.scope }),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ SW')), CONFIG.registrationTimeout)
        )
      ]);

      // console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è scope:', registration.scope);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        // console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker');
        
        newWorker.addEventListener('statechange', () => {
          // console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ SW:', newWorker.state);
          
          switch (newWorker.state) {
            case 'installed':
              if (navigator.serviceWorker.controller) {
                // console.log('üîÑ –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!');
                showUpdateNotification();
              } else {
                // console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
              }
              break;
            case 'activated':
              // console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
              break;
          }
        });
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Service Worker
      navigator.serviceWorker.addEventListener('message', (event) => {
        // console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Service Worker:', event.data);
        
        switch (event.data.type) {
          case 'CACHE_READY':
            // console.log('‚úÖ –ö—ç—à –≥–æ—Ç–æ–≤');
            break;
          case 'OFFLINE_READY':
            // console.log('üì∂ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç–µ');
            break;
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
      navigator.serviceWorker.addEventListener('controllerchange', () => {
        // console.log('üîÑ Controller –∏–∑–º–µ–Ω–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        window.location.reload();
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      if (error.message.includes('timeout')) {
        console.warn('‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SW –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
      } else if (error.message.includes('MIME-type')) {
        console.error('‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME-type –¥–ª—è SW —Ñ–∞–π–ª–∞');
      } else if (error.message.includes('scope')) {
        console.error('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å scope SW');
      }
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  function showUpdateNotification() {
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ alert
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #4CAF50;
      color: white;
      padding: 15px;
      border-radius: 5px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
      z-index: 10000;
      max-width: 300px;
    `;
    
    notification.innerHTML = `
      <strong>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</strong>
      <p>–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∞–π—Ç–∞ –≥–æ—Ç–æ–≤–∞.</p>
      <button onclick="this.parentElement.remove(); window.location.reload();" 
              style="background: white; color: #4CAF50; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">
        –û–±–Ω–æ–≤–∏—Ç—å
      </button>
      <button onclick="this.parentElement.remove()" 
              style="background: transparent; color: white; border: 1px solid white; padding: 5px 10px; border-radius: 3px; cursor: pointer; margin-left: 10px;">
        –ü–æ–∑–∂–µ
      </button>
    `;
    
    document.body.appendChild(notification);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  function init() {
    // console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Service Worker...');
    
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      registerServiceWorker();
    } else {
      document.addEventListener('DOMContentLoaded', registerServiceWorker);
    }
  }

  // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  init();

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  window.AppSW = {
    register: registerServiceWorker,
    unregister: async () => {
      if (!navigator.serviceWorker) return;
      const registration = await navigator.serviceWorker.ready;
      return registration.unregister();
    },
    checkCompatibility: canRegisterServiceWorker
  };
})();