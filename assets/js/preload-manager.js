// preload-manager.js - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
class PreloadManager {
  constructor() {
      this.loadedResources = new Set();
      this.pendingResources = new Map();
      this.isOnline = navigator.onLine;
      this.isLocalFile = window.location.protocol === 'file:';
      this.basePath = this.detectBasePath();
      
      console.log('üåê –†–µ–∂–∏–º:', this.isLocalFile ? '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª' : '–í–µ–±-—Å–µ—Ä–≤–µ—Ä');
      console.log('üìÅ –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å:', this.basePath);
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏
  detectBasePath() {
      const currentPath = window.location.pathname;
      
      if (this.isLocalFile) {
          // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          const pathParts = currentPath.split('/');
          pathParts.pop(); // –£–±–∏—Ä–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
          return pathParts.join('/') || '';
      } else {
          // –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–µ–Ω—å
          return '/';
      }
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å—É
  normalizePath(path) {
      // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å / –∏–ª–∏ http), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (path.startsWith('/') || path.startsWith('http://') || path.startsWith('https://')) {
          return path;
      }
      
      // –î–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
      if (path.startsWith('./')) {
          path = path.substring(2);
      }
      
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à
      if (this.isLocalFile) {
          return this.basePath + (this.basePath && !this.basePath.endsWith('/') ? '/' : '') + path;
      } else {
          return '/' + path;
      }
  }

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞ (–±–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
  async checkResourceExists(url) {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–µ—Å—É—Ä—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      if (this.isLocalFile) {
          return true;
      }
      
      // –¢–æ–ª—å–∫–æ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      try {
          const response = await fetch(url, { 
              method: 'HEAD',
              mode: 'same-origin',
              cache: 'no-cache'
          });
          return response.ok;
      } catch (error) {
          console.warn('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', url, error.message);
          return false;
      }
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  async preloadCritical() {
      const criticalResources = [
          'assets/css/style.css',
          'assets/images/MineOriginsAva.png',
          'assets/images/MineOrigins.png',
          'assets/images/icons/index_icon_house.png',
          'assets/js/main.js'
      ];

      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...');

      for (const resource of criticalResources) {
          const normalizedPath = this.normalizePath(resource);
          
          // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
          if (this.isLocalFile) {
              await this.preloadResource(normalizedPath);
          } else {
              const exists = await this.checkResourceExists(normalizedPath);
              if (exists) {
                  await this.preloadResource(normalizedPath);
              } else {
                  console.warn('‚ö†Ô∏è –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', normalizedPath);
              }
          }
      }
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  async preloadPages() {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (this.isLocalFile) {
          console.log('üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
          return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
      if (!this.isOnline) {
          console.log('üì∂ –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É');
          return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if ('connection' in navigator) {
          const connection = navigator.connection;
          if (connection.saveData || connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
              console.log('üêå –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É');
              return;
          }
      }

      const pagesToPreload = [
          'players.html',
          'settlements.html', 
          'gallery.html',
          'faq.html'
      ];

      console.log('üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü...');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestIdleCallback –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      const preloadTask = async () => {
          for (const page of pagesToPreload) {
              const normalizedPath = this.normalizePath(page);
              await this.preloadPage(normalizedPath);
          }
      };

      if ('requestIdleCallback' in window) {
          requestIdleCallback(() => {
              preloadTask();
          }, { timeout: 2000 });
      } else {
          setTimeout(preloadTask, 1000);
      }
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
  async preloadResource(url) {
      if (this.loadedResources.has(url) || this.pendingResources.has(url)) {
          return;
      }

      try {
          // –î–ª—è CSS —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
          if (url.endsWith('.css')) {
              await this.preloadCSS(url);
              return;
          }

          const link = document.createElement('link');
          link.rel = 'preload';
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞
          if (url.endsWith('.js')) {
              link.as = 'script';
          } else if (url.match(/\.(png|jpg|jpeg|gif|webp|svg)$/)) {
              link.as = 'image';
          } else {
              link.as = 'document';
          }

          link.href = url;
          
          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
          link.onload = () => {
              console.log('‚úÖ –†–µ—Å—É—Ä—Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω:', this.getShortPath(url));
              this.resourceLoaded(url);
          };
          
          link.onerror = (error) => {
              console.warn('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–∞:', this.getShortPath(url));
              this.pendingResources.delete(url);
              
              // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
              if (this.isLocalFile) {
                  this.resourceLoaded(url);
              }
          };

          document.head.appendChild(link);
          this.pendingResources.set(url, link);
          
          // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ onload –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
          if (this.isLocalFile) {
              setTimeout(() => {
                  if (this.pendingResources.has(url)) {
                      console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª):', this.getShortPath(url));
                      this.resourceLoaded(url);
                  }
              }, 1000);
          }
          
      } catch (error) {
          console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ preload —Å—Å—ã–ª–∫–∏:', error);
          // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ—á–∞–µ–º —Ä–µ—Å—É—Ä—Å –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          if (this.isLocalFile) {
              this.resourceLoaded(url);
          }
      }
  }

  // –£–∫–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –ª–æ–≥–æ–≤
  getShortPath(fullPath) {
      const parts = fullPath.split('/');
      return parts.slice(-3).join('/');
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ CSS
  async preloadCSS(url) {
      try {
          // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º CSS –±–µ–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
          if (this.isLocalFile) {
              const cssLink = document.createElement('link');
              cssLink.rel = 'stylesheet';
              cssLink.href = url;
              cssLink.onload = () => {
                  console.log('‚úÖ CSS –∑–∞–≥—Ä—É–∂–µ–Ω:', this.getShortPath(url));
                  this.resourceLoaded(url);
              };
              cssLink.onerror = () => {
                  console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS:', this.getShortPath(url));
                  this.resourceLoaded(url); // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π
              };
              document.head.appendChild(cssLink);
              this.pendingResources.set(url, cssLink);
              return;
          }

          // –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
          const preloadLink = document.createElement('link');
          preloadLink.rel = 'preload';
          preloadLink.as = 'style';
          preloadLink.href = url;
          
          preloadLink.onload = () => {
              console.log('‚úÖ CSS –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω:', this.getShortPath(url));
              this.resourceLoaded(url);
              
              // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º CSS –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
              const cssLink = document.createElement('link');
              cssLink.rel = 'stylesheet';
              cssLink.href = url;
              document.head.appendChild(cssLink);
          };
          
          preloadLink.onerror = () => {
              console.warn('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ CSS:', this.getShortPath(url));
              this.pendingResources.delete(url);
          };

          document.head.appendChild(preloadLink);
          this.pendingResources.set(url, preloadLink);
          
      } catch (error) {
          console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ CSS:', error);
          // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π
          if (this.isLocalFile) {
              this.resourceLoaded(url);
          }
      }
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async preloadPage(url) {
      if (!this.isOnline || this.isLocalFile) {
          return;
      }

      try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          const exists = await this.checkResourceExists(url);
          
          if (exists) {
              const link = document.createElement('link');
              link.rel = 'prefetch';
              link.href = url;
              
              link.onload = () => {
                  console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞:', this.getShortPath(url));
              };
              
              link.onerror = (error) => {
                  console.warn('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', this.getShortPath(url));
              };

              document.head.appendChild(link);
          } else {
              console.warn('‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', this.getShortPath(url));
          }
      } catch (error) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É:', this.getShortPath(url));
      }
  }

  resourceLoaded(url) {
      this.loadedResources.add(url);
      this.pendingResources.delete(url);
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  lazyLoadImages() {
      if (!('IntersectionObserver' in window)) {
          this.loadImagesImmediately();
          return;
      }

      const imageObserver = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
              if (entry.isIntersecting) {
                  const img = entry.target;
                  this.loadImage(img);
                  observer.unobserve(img);
              }
          });
      }, {
          rootMargin: '50px 0px',
          threshold: 0.1
      });

      document.querySelectorAll('img[data-src]').forEach(img => {
          if (!img.src) {
              img.src = this.createPlaceholder();
          }
          imageObserver.observe(img);
      });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ SVG placeholder
  createPlaceholder(width = 100, height = 100) {
      return `data:image/svg+xml;base64,${btoa(`
          <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
              <rect width="100%" height="100%" fill="#f0f0f0"/>
              <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-size="12" fill="#999">Loading...</text>
          </svg>
      `)}`;
  }

  loadImage(img) {
      const src = img.dataset.src;
      if (!src) return;

      const normalizedSrc = this.normalizePath(src);
      const image = new Image();
      
      image.onload = () => {
          img.src = normalizedSrc;
          img.classList.remove('lazy');
          img.classList.add('loaded');
      };
      
      image.onerror = () => {
          console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.getShortPath(normalizedSrc));
          img.classList.add('image-error');
      };
      
      image.src = normalizedSrc;
  }

  loadImagesImmediately() {
      document.querySelectorAll('img[data-src]').forEach(img => {
          const src = img.dataset.src;
          if (src) {
              const normalizedSrc = this.normalizePath(src);
              img.src = normalizedSrc;
              img.classList.remove('lazy');
          }
      });
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
  optimizeFonts() {
      const fontLinks = [
          'https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap',
          'https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap'
      ];

      // Preconnect –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —à—Ä–∏—Ñ—Ç–æ–≤
      this.addPreconnect('https://fonts.googleapis.com');
      this.addPreconnect('https://fonts.gstatic.com', true);

      // –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
      fontLinks.forEach(fontUrl => {
          this.loadFont(fontUrl);
      });
  }

  addPreconnect(url, crossOrigin = false) {
      try {
          const link = document.createElement('link');
          link.rel = 'preconnect';
          link.href = url;
          if (crossOrigin) link.crossOrigin = 'anonymous';
          document.head.appendChild(link);
      } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ preconnect:', error);
      }
  }

  loadFont(fontUrl) {
      try {
          const fontLink = document.createElement('link');
          fontLink.rel = 'stylesheet';
          fontLink.href = fontUrl;
          document.head.appendChild(fontLink);
      } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞:', error);
      }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  getStatus() {
      return {
          loaded: Array.from(this.loadedResources),
          pending: Array.from(this.pendingResources.keys()),
          online: this.isOnline,
          isLocalFile: this.isLocalFile,
          basePath: this.basePath
      };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
const preloadManager = new PreloadManager();

// –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
function initializePreloadManager() {
  try {
      preloadManager.optimizeFonts();
      preloadManager.lazyLoadImages();
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      const onWindowLoad = () => {
          setTimeout(() => {
              preloadManager.preloadCritical().then(() => {
                  console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
              });
              
              // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
              setTimeout(() => {
                  preloadManager.preloadPages().then(() => {
                      console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                  });
              }, 500);
          }, 100);
      };

      if (document.readyState === 'complete') {
          onWindowLoad();
      } else {
          window.addEventListener('load', onWindowLoad, { once: true });
      }
  } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PreloadManager:', error);
  }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializePreloadManager);
} else {
  initializePreloadManager();
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.getPreloadStatus = () => preloadManager.getStatus();