// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ JSON
document.addEventListener('DOMContentLoaded', function() {
    // console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä–æ–∫–æ–≤');
    initPlayersPage();
    initPlayersFilter();
    initPlayersStats();
    loadPlayersData();
    initRealTimePlayerCount();
    initOnlineStatusSystem();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤
function initPlayersPage() {
    // console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
function initOnlineStatusSystem() {
    // console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
    updateOnlineStatusForAllPlayers();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(updateOnlineStatusForAllPlayers, 30000);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function getOnlinePlayers() {
    try {
        // console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤...');
        
        const SERVER_CONFIG = {
            apiEndpoints: {
                status: 'https://api.mcsrvstat.us/3/95.216.92.76:25835',
                ping: 'https://api.mcsrvstat.us/debug/ping/95.216.92.76:25835',
                backup: 'https://api.mcsrvstat.us/2/95.216.92.76:25835'
            }
        };

        // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ API
        const response = await fetch(SERVER_CONFIG.apiEndpoints.status, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
            },
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        // console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã:', data);

        if (data.online && data.players && data.players.list) {
            return data.players.list.map(player => player.toLowerCase());
        } else if (data.online && data.players && data.players.uuid) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å UUID, –Ω–æ –Ω–µ—Ç –∏–º–µ–Ω
            return Object.keys(data.players.uuid).map(player => player.toLowerCase());
        } else {
            // console.log('üìä –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return getTestOnlinePlayers();
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return getTestOnlinePlayers();
    }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤ (—É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
function getTestOnlinePlayers() {
    const testPlayers = [
        "_kot_baris_", "stalker_hunter_", "amidamaru3434", "darcklord", 
        "maxxaumka", "pandamom", "snekky_offc", "cartoshka_"
    ];
    
    // –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º –∫—Ç–æ –æ–Ω–ª–∞–π–Ω (50% —à–∞–Ω—Å)
    return testPlayers.filter(() => Math.random() > 0.5);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
async function updateOnlineStatusForAllPlayers() {
    try {
        // console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–≤...');
        
        const onlinePlayers = await getOnlinePlayers();
        // console.log(`üìä –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤: ${onlinePlayers.length}`, onlinePlayers);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∏–≥—Ä–æ–∫–æ–≤
        updatePlayerCardsStatus(onlinePlayers);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã
        updateModalStatuses(onlinePlayers);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        showStatusUpdateNotification(onlinePlayers.length);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∏–≥—Ä–æ–∫–æ–≤
function updatePlayerCardsStatus(onlinePlayers) {
    const playerCards = document.querySelectorAll('.player-card');
    
    playerCards.forEach(card => {
        const playerNameElement = card.querySelector('.player-name');
        if (!playerNameElement) return;
        
        const playerName = playerNameElement.textContent.toLowerCase().trim();
        const isOnline = onlinePlayers.includes(playerName);
        
        updateCardStatus(card, isOnline);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä–æ–∫–∞
function updateCardStatus(card, isOnline) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
    card.classList.remove('player-online', 'player-offline');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
    card.classList.add(isOnline ? 'player-online' : 'player-offline');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
    let statusIndicator = card.querySelector('.player-status-indicator');
    if (!statusIndicator) {
        statusIndicator = document.createElement('div');
        statusIndicator.className = 'player-status-indicator';
        card.querySelector('.player-header').prepend(statusIndicator);
    }
    
    statusIndicator.className = `player-status-indicator ${isOnline ? 'online' : 'offline'}`;
    statusIndicator.title = isOnline ? '–°–∫–æ—Ä–æ' : '–°–∫–æ—Ä–æ';
    // statusIndicator.title = isOnline ? '–°–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ' : '–ù–µ –≤ —Å–µ—Ç–∏';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    const statusText = card.querySelector('.player-status-text');
    if (statusText) {
        statusText.textContent = isOnline ? '–°–∫–æ—Ä–æ' : '–°–∫–æ—Ä–æ';
        // statusText.textContent = isOnline ? '–í –∏–≥—Ä–µ' : '–ù–µ –≤ —Å–µ—Ç–∏';
        statusText.className = `player-status-text ${isOnline ? 'online' : 'offline'}`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
function updateModalStatuses(onlinePlayers) {
    const modals = document.querySelectorAll('.player-modal');
    
    modals.forEach(modal => {
        const playerNameElement = modal.querySelector('.player-info h2');
        if (!playerNameElement) return;
        
        const playerName = playerNameElement.textContent.toLowerCase().trim();
        const isOnline = onlinePlayers.includes(playerName);
        
        updateModalStatus(modal, isOnline);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function updateModalStatus(modal, isOnline) {
    let statusBadge = modal.querySelector('.player-online-status');
    
    if (!statusBadge) {
        statusBadge = document.createElement('div');
        statusBadge.className = 'player-online-status';
        modal.querySelector('.player-info').appendChild(statusBadge);
    }
    
    statusBadge.className = `player-online-status ${isOnline ? 'online' : 'offline'}`;
    statusBadge.innerHTML = `
        <span class="status-dot"></span>
        <span class="status-text">${isOnline ? '–°–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ' : '–ù–µ –≤ —Å–µ—Ç–∏'}</span>
    `;
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
function showStatusUpdateNotification(onlineCount) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingNotification = document.querySelector('.status-update-notification');
    if (existingNotification) {
        existingNotification.remove();
    }
    
    const notification = document.createElement('div');
    notification.className = 'status-update-notification';
    notification.innerHTML = `
        <div class="status-update-content">
            <div class="status-update-icon">üîÑ</div>
            <div class="status-update-text">
                <strong>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω</strong>
                <span>–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${onlineCount} –∏–≥—Ä–æ–∫–æ–≤</span>
            </div>
            <button class="status-update-close">√ó</button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        hideStatusNotification(notification);
    }, 3000);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
    notification.querySelector('.status-update-close').addEventListener('click', () => {
        hideStatusNotification(notification);
    });
}

// –°–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function hideStatusNotification(notification) {
    notification.classList.remove('show');
    notification.classList.add('hide');
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 300);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ JSON
async function loadPlayersData() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...');
        showLoadingState();
        const playersData = await fetchPlayersData();
        console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', playersData);
        renderPlayersGrid(playersData);
        updatePlayersStats(playersData);
        hideLoadingState();
        
        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
        setTimeout(() => {
            updateOnlineStatusForAllPlayers();
        }, 1000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error);
        console.log('–ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ...');
        loadDemoPlayersData();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
async function fetchPlayersData() {
    try {
        console.log('–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å players.json...');
        
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (window.location.protocol === 'file:') {
            console.log('üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤');
            return getLocalPlayersData();
        }
        
        // –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º JSON
        const response = await fetch('assets/json/players.json');
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
        
        if (!data.players || !Array.isArray(data.players)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ players');
        }
        
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.players.length} –∏–≥—Ä–æ–∫–æ–≤`);
        return data.players;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:', error);
        throw error;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
function renderPlayersGrid(players) {
    const grid = document.getElementById('playersGrid');
    if (!grid) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç playersGrid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }

    // console.log(`–†–µ–Ω–¥–µ—Ä–∏–º ${players.length} –∏–≥—Ä–æ–∫–æ–≤`);
    grid.innerHTML = '';

    if (players.length === 0) {
        grid.innerHTML = `
            <div class="no-players-message">
                <h3>–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ï—Å–ª–∏ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</p>
            </div>
        `;
        return;
    }

    players.forEach((player, index) => {
        // console.log(`–°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${player.name}`);
        const playerCard = createPlayerCard(player);
        grid.appendChild(playerCard);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            playerCard.classList.add('visible');
        }, index * 100);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
function createPlayerCard(player) {
    // console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è ${player.name}`, player);
    
    const card = document.createElement('div');
    card.className = `player-card ${player.race}-race`;
    card.setAttribute('data-race', player.race);
    card.setAttribute('data-player-id', player.id);
    card.setAttribute('data-player-name', player.name.toLowerCase());
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    const socials = player.socials || {};
    const hasSocials = Object.keys(socials).length > 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
    const avatarPath = player.avatar || 'assets/icons/players/default.png';
    // console.log(`–ê–≤–∞—Ç–∞—Ä –¥–ª—è ${player.name}: ${avatarPath}`);
    
    card.innerHTML = `
        <div class="player-header">
            <div class="player-avatar ${player.race}">
                <img src="${avatarPath}" alt="${player.name}" class="avatar-image" 
                     onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è ${player.name}'); this.src='assets/icons/players/default.png'">
            </div>
            <div class="player-main-info">
                <h3 class="player-name">${player.name}</h3>
                <div class="player-meta">
                    <span class="player-race-badge race-${player.race}">${getRaceName(player.race)}</span>
                </div>
            </div>
        </div>
        <div class="player-description">
            <p>${player.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
        </div>
        ${hasSocials ? `
        <div class="player-contacts">
            ${socials.discord ? `<a href="https://discord.gg/yvjewMujcx" class="contact-link discord" title="Discord"><img src="assets/images/icons/icon_discord.gif" alt="" class="contact-icon"> ${socials.discord}</a>` : ''}
            ${socials.telegram ? `<a href="https://t.me/mine_origins" class="contact-link telegram" title="Telegram"><img src="assets/images/icons/icon_telegram.gif" alt="" class="contact-icon"> ${socials.telegram}</a>` : ''}
        </div>
        ` : '<div class="player-contacts"><span class="no-contacts">–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</span></div>'}
        <div class="player-footer">
            <span class="join-date">–° –Ω–∞–º–∏ —Å ${formatDate(player.joinDate)}</span>
            <button class="profile-btn" data-player-id="${player.id}">–ü—Ä–æ—Ñ–∏–ª—å</button>
        </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    card.addEventListener('click', (e) => {
        if (!e.target.closest('.contact-link') && !e.target.closest('.profile-btn')) {
            showPlayerProfile(player);
        }
    });

    const profileBtn = card.querySelector('.profile-btn');
    if (profileBtn) {
        profileBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            showPlayerProfile(player);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    card.querySelectorAll('.contact-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            const contactType = link.classList[1];
            const contactInfo = link.textContent.replace(/[üéÆ‚úàÔ∏è]/g, '').trim();
            showContactInfo(contactType, contactInfo);
        });
    });

    return card;
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
function showPlayerProfile(player) {
    const socials = player.socials || {};
    
    const modal = document.createElement('div');
    modal.className = 'player-modal';
    modal.innerHTML = `
        <div class="modal-content ${player.race}-theme">
            <div class="modal-header">
                <div class="player-avatar-large ${player.race}">
                    <img src="${player.avatar}" alt="${player.name}" class="avatar-image-large"
                         onerror="this.src='assets/icons/players/default.png'">
                </div>
                <div class="player-info">
                    <h2>${player.name}</h2>
                    <span class="player-race-badge">${getRaceName(player.race)}</span>
                </div>
                <button class="modal-close">
                    <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                        <path d="M15 5L5 15M5 5L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                </button>
            </div>
            <div class="modal-body">
                <div class="player-stats-detailed">
                    <div class="stat-item">
                        <span class="stat-label">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è</span>
                        <span class="stat-value">${formatDate(player.joinDate)}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–†–∞—Å–∞</span>
                        <span class="stat-value">${getRaceName(player.race)}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–°—Ç–∞—Ç—É—Å</span>
                        <span class="stat-value online-status-value">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    </div>
                </div>
                <div class="player-description-detailed">
                    <h4>–û —Å–µ–±–µ</h4>
                    <p>${player.description}</p>
                </div>
                ${Object.keys(socials).length > 0 ? `
                <div class="player-contacts-detailed">
                    <h4>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
                    <div class="contacts-list">
                        ${socials.discord ? `
                            <div class="contact-item discord">
                                <span class="contact-icon"><img src="assets/images/icons/icon_discord.gif" alt="" class="contact-icon"></span>
                                <div class="contact-info">
                                    <strong>Discord</strong>
                                    <span>${socials.discord}</span>
                                </div>
                                <button class="copy-contact" data-text="${socials.discord}">
                                    <img src="assets/images/icons/Copy_gifzada.png" alt="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" class="contact-icon">
                                </button>
                            </div>
                        ` : ''}
                        ${socials.telegram ? `
                            <div class="contact-item telegram">
                                <span class="contact-icon"><img src="assets/images/icons/icon_telegram.gif" alt="" class="contact-icon"></span>
                                <div class="contact-info">
                                    <strong>Telegram</strong>
                                    <span>${socials.telegram}</span>
                                </div>
                                <a href="https://t.me/${socials.telegram.replace('@', '')}" class="contact-link-btn" target="_blank">
                                    <img src="assets/images/icons/copy_link.png" alt="–ü–µ—Ä–µ–π—Ç–∏" class="contact-icon">
                                </a>
                            </div>
                        ` : ''}
                    </div>
                </div>
                ` : '<div class="no-contacts-detailed"><p>–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p></div>'}
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }, 10);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    updatePlayerModalStatus(modal, player.name);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.querySelector('.modal-close').addEventListener('click', closeModal);
    modal.addEventListener('click', (e) => {
        if (e.target === modal) closeModal();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    modal.querySelectorAll('.copy-contact').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const text = e.target.closest('.copy-contact').getAttribute('data-text');
            navigator.clipboard.writeText(text).then(() => {
                showPremiumNotification('Discord', text);
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                showPremiumNotification('Discord', text, true);
            });
        });
    });

    function closeModal() {
        modal.classList.remove('active');
        setTimeout(() => {
            modal.remove();
            document.body.style.overflow = '';
        }, 300);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∏–≥—Ä–æ–∫–∞
async function updatePlayerModalStatus(modal, playerName) {
    try {
        const onlinePlayers = await getOnlinePlayers();
        const isOnline = onlinePlayers.includes(playerName.toLowerCase());
        
        const statusElement = modal.querySelector('.online-status-value');
        const onlineStatus = modal.querySelector('.player-online-status');
        
        if (statusElement) {
            statusElement.textContent = isOnline ? '–°–∫–æ—Ä–æ' : '–°–∫–æ—Ä–æ';
            statusElement.className = `online-status-value ${isOnline ? 'online' : 'offline'}`;
            // –í —Å–µ—Ç–∏ –Ω–µ –≤ —Å–µ—Ç–∏
        }
        
        if (onlineStatus) {
            onlineStatus.className = `player-online-status ${isOnline ? 'online' : 'offline'}`;
            onlineStatus.innerHTML = `
                <span class="status-dot"></span>
                <span class="status-text">–°–ö–û–†–û</span>
            `;
            // ${isOnline ? '–°–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ' : '–ù–µ –≤ —Å–µ—Ç–∏'}
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ:', error);
    }
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
function showContactInfo(type, info) {
    const contactNames = {
        discord: 'Discord',
        telegram: 'Telegram',
        tiktok: 'TikTok'
    };

    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    navigator.clipboard.writeText(info).then(() => {
        showPremiumNotification(contactNames[type], info);
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        showPremiumNotification(contactNames[type], info, true);
    });
}

// –ü–æ–∫–∞–∑ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showPremiumNotification(platform, info, isFallback = false) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingNotification = document.querySelector('.copy-notification');
    if (existingNotification) {
        existingNotification.remove();
    }

    const notification = document.createElement('div');
    notification.className = 'copy-notification premium';
    
    const platformConfig = {
        discord: { icon: '<img src="assets/images/icons/icon_discord.gif" class="nav-image-index">', color: '#5865F2', glow: 'rgba(88, 101, 242, 0.3)' },
        telegram: { icon: '<img src="assets/images/icons/icon_telegram.gif" class="nav-image-index">', color: '#0088cc', glow: 'rgba(0, 136, 204, 0.3)' },
        tiktok: { icon: '', color: '#ff0050', glow: 'rgba(255, 0, 80, 0.3)' }
    };
    
    const config = platformConfig[platform.toLowerCase()] || { 
        icon: 'üìã', 
        color: 'var(--mc-accent)', 
        glow: 'rgba(126, 87, 194, 0.3)' 
    };

    notification.innerHTML = `
        <div class="notification-glow" style="background: ${config.glow}"></div>
        <div class="copy-notification-content">
            <div class="notification-header">
                <div class="notification-badge" style="background: ${config.color}">
                    <span class="notification-icon">${config.icon}</span>
                    <div class="notification-pulse"></div>
                </div>
                <div class="notification-title">
                    <span class="platform-name">${platform}</span>
                    <span class="notification-status">${isFallback ? '–ì–æ—Ç–æ–≤–æ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é' : '–£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!'}</span>
                </div>
                <button class="notification-close">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                        <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                </button>
            </div>
            <div class="notification-body">
                <div class="copied-content ${isFallback ? 'selectable' : ''}">
                    <span class="content-label">${isFallback ? '–í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:' : '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:'}</span>
                    <div class="content-text">${info}</div>
                </div>
                ${isFallback ? `
                <div class="notification-hint">
                    <span class="hint-icon">üí°</span>
                    <span class="hint-text">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å</span>
                </div>
                ` : ''}
            </div>
            <div class="notification-progress">
                <div class="progress-bar">
                    <div class="progress-fill" style="background: ${config.color}"></div>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.add('show');
        startProgressAnimation(notification);
    }, 10);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    const autoHide = setTimeout(() => {
        hidePremiumNotification(notification);
    }, 5000);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
    notification.querySelector('.notification-close').addEventListener('click', () => {
        clearTimeout(autoHide);
        hidePremiumNotification(notification);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.addEventListener('click', (e) => {
        if (e.target === notification) {
            clearTimeout(autoHide);
            hidePremiumNotification(notification);
        }
    });

    // –î–ª—è fallback —Ä–µ–∂–∏–º–∞ - –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ
    if (isFallback) {
        const textDiv = notification.querySelector('.content-text');
        textDiv.addEventListener('click', function() {
            const range = document.createRange();
            range.selectNodeContents(this);
            const selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
            const hint = notification.querySelector('.notification-hint');
            hint.innerHTML = '<span class="hint-icon">‚úÖ</span><span class="hint-text">–¢–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C</span>';
        });
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function startProgressAnimation(notification) {
    const progressFill = notification.querySelector('.progress-fill');
    if (progressFill) {
        progressFill.style.width = '100%';
        progressFill.style.transition = 'width 5s linear';
    }
}

// –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function hidePremiumNotification(notification) {
    notification.classList.remove('show');
    notification.classList.add('hide');
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 500);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function initPlayersFilter() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const searchInput = document.getElementById('playersSearch');

    filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            filterBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            const filter = this.getAttribute('data-filter');
            filterPlayers(filter);
        });
    });

    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            filterPlayersBySearch(searchTerm);
        });
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–∞—Å–µ
function filterPlayers(filter) {
    const players = document.querySelectorAll('.player-card');
    
    players.forEach(player => {
        if (filter === 'all' || player.getAttribute('data-race') === filter) {
            player.style.display = 'flex';
        } else {
            player.style.display = 'none';
        }
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
function filterPlayersBySearch(searchTerm) {
    const players = document.querySelectorAll('.player-card');
    const activeFilter = document.querySelector('.filter-btn.active').getAttribute('data-filter');
    
    players.forEach(player => {
        const playerName = player.querySelector('.player-name').textContent.toLowerCase();
        const playerRace = player.getAttribute('data-race');
        
        const matchesSearch = playerName.includes(searchTerm);
        const matchesFilter = activeFilter === 'all' || playerRace === activeFilter;
        
        if (matchesSearch && matchesFilter) {
            player.style.display = 'flex';
        } else {
            player.style.display = 'none';
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function initPlayersStats() {
    const statNumbers = document.querySelectorAll('.stat-number[data-target]');
    
    statNumbers.forEach(stat => {
        const target = parseInt(stat.getAttribute('data-target'));
        animateCounter(stat, target, 2000);
    });
}


// –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
function getLocalPlayersData() {
    return [
        {
            "id": 1,
            "name": "_Kot_Baris_",
            "avatar": "assets/images/icons/kotbaris.png",
            "race": "earth",
            "description": "‚óà –ó–µ–º–Ω–æ–π\n–ö–æ—Ç–æ-—á–µ–ª–æ–≤–µ–∫, —è –ª–∏–¥–µ—Ä –∑–µ–º–Ω–æ–π —Ä–∞—Å—ã, —Å–æ–∑–¥–∞—Ç–µ–ª—å –§—Ä–∏–∫–ë—É—Ä–≥—Å–∫–æ–π –ò–º–ø–µ—Ä–∏–∏, —Ö–æ—á–µ—Ç –Ω–∞–ª–∞–¥–∏—Ç—å –º–∏—Ä –º–µ–∂–¥—É —Ä–∞—Å–∞–º–∏.",
            "joinDate": "2025-10-11",
            "socials": {
              "discord": "borisonchik_yt",
              "telegram": "@BorisonchikOfficial"
            }
          },
          {
            "id": 2,
            "name": "stalker_hunter_",
            "avatar": "assets/images/icons/stalker.png",
            "race": "hell",
            "description": "‚óà –î–µ–º–æ–Ω\n–ü–∞–¥—à–∏–π –ê–Ω–≥–µ–ª ‚Äî –ª–∏–¥–µ—Ä –∞–¥—Å–∫–æ–π —Ä–∞—Å—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –æ—Ç–∫—Ä—ã—Ç–∏—è. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç –º–µ–∂–¥—É –§—Ä–∏–∫–ë—É—Ä–≥–æ–º –∏ –í–î–ù–•, –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –≤ –∞–¥—É –∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.",
            "joinDate": "2025-10-11",
            "socials": {
              "discord": "stalker_hunter_",
              "telegram": "@Stalker_Hunter_s"
            }
          },
          {
            "id": 3,
            "name": "amidamaru3434",
            "avatar": "assets/images/icons/ERROR.png",
            "race": "heaven",
            "description": "‚óà –ê–Ω–≥–µ–ª\n–°–µ—Ä–∞—Ñ–∏–º ‚Äî –ª–∏–¥–µ—Ä —Ä–∞–π—Å–∫–æ–π —Ä–∞—Å—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –æ—Ç–∫—Ä—ã—Ç–∏—è.",
            "joinDate": "2025-10-14",
            "socials": {
              "discord": "bruhhhhsasa21",
              "telegram": "@aza_matsuto"
            }
          },
          {
            "id": 4,
            "name": "darcklord",
            "avatar": "assets/images/icons/darcklord.png",
            "race": "earth",
            "description": "–î–≤–æ—Ä—Ñ ‚Äî –±—ã–≤—à–∏–π –≤–æ–∏–Ω –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ –∂–∏—Ç—å –Ω–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∑–æ–≤—É—Ç –µ–≥–æ\n–ñ–∏–≤–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ –§—Ä–∏–∫–±—É—Ä–≥  –∏ —Ö–æ—á–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç—å –∑–æ–ª–æ—Ç—ã—Ö —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ª—É—á—à—É—é —Ö–∞—Ä—á–µ–≤–Ω—é –≥–¥–µ –ª—é–¥–∏ –∏ –Ω–µ–ª—é–¥–∏ —Å–º–æ–≥–ª–∏ –±—ã –¥–∞–≤–∞—Ç—å –∏ –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞—Ç—å –∏ —Å–Ω–∏–º–∞—Ç—å –∂–∏–ª—å–µ –∞ —Ç–∞–∫ –∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–π–¥–∞—Ö –Ω–∞ –∑–∞–º–∫–∏ –∏ –±—ã—Ç—å –Ω–∞–µ–º–Ω–∏–∫–∞–º–∏,",
            "joinDate": "2025-10-11",
            "socials": {
              "discord": "bagriannik._33166",
              "telegram": ""
            }
          },
          {
            "id": 5,
            "name": "ddanilkaaaa",
            "avatar": "assets/images/icons/ERROR.png",
            "race": "earth",
            "description": "",
            "joinDate": "2025-10-13",
            "socials": {
                "discord": "ddanilkaaaa_83622",
                "telegram": "@Ddanilkaaaa"
            }
          },
          {
            "id": 6,
            "name": "deace",
            "avatar": "assets/images/icons/deace.png",
            "race": "heaven",
            "description": "–ê–Ω–≥–µ–ª –≥–∏–≥–∞—á–∞–¥, —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–æ—Ä—Ü–∏—Å—Ç–æ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–Ω–≥–µ–ª–æ–≤. –ò—Å—Ç—Ä–µ–±–ª—è–µ—Ç –Ω–µ—á–µ—Å—Ç–µ–π, –¥–µ–º–æ–Ω–æ–≤ –∏ –¥–∞–∂–µ –ª—é–¥–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç)",
            "joinDate": "2025-10-25",
            "socials": {
                "discord": "winchikvpotoke_36739",
                "telegram": "@Zkrtssikit"
            }
          },
          {
            "id": 7,
            "name": "hyutjnh",
            "avatar": "assets/images/icons/ERROR.png",
            "race": "heaven",
            "description": "–ê–Ω–≥–µ–ª - —É—á–∞—Å—Ç–Ω–∏–∫ –∞–Ω–≥–µ–ª—å—Å–∫–æ–π —Ä–∞—Å—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –æ—Ç–∫—Ä—ã—Ç–∏—è(—è –µ—â—ë —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –±–ª–µ–∫ –∞–ª—å—Ñ—ã). –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç –º–µ–∂–¥—É –§—Ä–∏–∫–ë—É—Ä–≥–æ–º, –õ–• –∏ –í–î–ù–•, –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ª–∞–º–ø–æ–≤—ã–π, –ª—é–±–ª—é –ª–∏—Å.",
            "joinDate": "2025-10-18",
            "socials": {
                "discord": "last_troid_0079",
                "telegram": "@ED4MKM_AERO"
            }
          },
          {
            "id": 8,
            "name": "jdh16",
            "avatar": "assets/images/icons/ERROR.png",
            "race": "earth",
            "description": "",
            "joinDate": "2025-10-22",
            "socials": {
                "discord": "frozen_flames1703",
                "telegram": "@Frozen2474"
            }
          },
          {
            "id": 9,
            "name": "maxxaumka",
            "avatar": "assets/images/icons/maksimka.png",
            "race": "earth",
            "description": "–í–æ–ª—à–µ–±–Ω–∏–∫ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–Ω –Ω–µ–π—Ç—Ä–∞–ª–µ–Ω –∫–æ –≤—Å–µ–º —Ä–∞—Å–∞–º –∏ –∫–ª–∞–Ω–∞–º –∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ. –ñ–∏–≤—ë—Ç –≤ –∫—É–±–µ –≤–º–µ—Å—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º snekky_off, —Å –∫–æ—Ç–æ—Ä—ã–º –∏–∑—É—á–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∏ –º–∞—à–∏–Ω—ã.",
            "joinDate": "2025-10-13",
            "socials": {
                "discord": "maxxaumka6679",
                "telegram": "@KOT_B_palbto"
            }
          },
          {
            "id": 10,
            "name": "nicotine",
            "avatar": "assets/images/icons/ERROR.png",
            "race": "earth",
            "description": "",
            "joinDate": "2025-10-12",
            "socials": {
                "discord": "maximus7915",
                "telegram": "@Maxim_beb"
            }
          },
          {
            "id": 11,
            "name": "pandamom",
            "avatar": "assets/images/icons/pandamom.png",
            "race": "earth",
            "description": "–ö–æ—Ç–æ-—á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é —Ö–∑ –∫–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é –º–∏—Ä–Ω–æ—Å—Ç—å –≤ –§—Ä–∏–∫–ë—É—Ä–≥–µ –±–µ–≥–∞—é",
            "joinDate": "2025-10-11",
            "socials": {
                "discord": "pisde4",
                "telegram": "@Heyheyhey223"
            }
          },
          {
            "id": 12,
            "name": "snekky_offc",
            "avatar": "assets/images/icons/snekky.png",
            "race": "heaven",
            "description": "–ò–∑-–∑–∞ —Å–∫—É—á–Ω–æ–≥–æ –º–∏—Ä–∞ –∞–Ω–≥–µ–ª–æ–≤, —è —Ä–µ—à–∏–ª –ø–æ–∫–∏–Ω—É—Ç—å –Ω–µ–±–µ—Å–∞. –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è —è –±—Ä–æ–¥–∏–ª –ø–æ –º–∏—Ä—É, –≥–¥–µ –∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª –∑–µ–º–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∫–∞ –ú–∞–∫—Å–∞—É–º–∫–∞. –ï–≥–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª –º–∏—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ü–æ—Å–ª–µ –¥–æ–ª–≥–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞ –±–∞–∑–µ - –û–∫–µ–∞–Ω–∏—á–µ—Å–∫–∞—è –ß–µ—Ä–µ–ø–∞—Ö –æ–Ω —Å–º–æ–≥ —Å—Ç–∞—Ç—å –ö–∏–±–µ—Ä-–ê–Ω–≥–µ–ª–æ–º",
            "joinDate": "2025-10-11",
            "socials": {
                "discord": "linar9341",
                "telegram": "@FV_4_0_0_5"
            }
      },
          {
            "id": 13,
            "name": "Yaryna",
            "avatar": "assets/images/icons/ERROR.png",
            "race": "hell",
            "description": "–î–µ–º–æ–Ω–∏—Ü–∞ ‚Äî –∂–∏—Ç–µ–ª—å –õ–æ–≥–æ–≤–∞ –•–∞–Ω—Ç–µ—Ä–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è —É—á–∞—Å—Ç–Ω–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
            "joinDate": "",
            "socials": {
                "discord": "prus404",
                "telegram": "@Prus404"
            }
      }, 
          {
            "id": 14,
            "name": "Lemonchik",
            "avatar": "assets/images/icons/ERROR.png",
            "race": "hell",
            "description": "",
            "joinDate": "",
            "socials": {
                "discord": "yt_lymonchuk",
                "telegram": "@Motosport_52"
            }
      }, 
          {
            "id": 15,
            "name": "tropic_yt2021",
            "avatar": "assets/images/icons/ERROR.png",
            "race": "earth",
            "description": "",
            "joinDate": "",
            "socials": {
                "discord": "trop1c_.",
                "telegram": "@tropic_mc"
            }
      }, 
          {
            "id": 16,
            "name": "Ayaz_ak",
            "avatar": "assets/images/icons/ERROR.png",
            "race": "earth",
            "description": "",
            "joinDate": "",
            "socials": {
                "discord": "a.l.t.y.n",
                "telegram": "@Ayaz_ak"
            }
      },
      {
        "id": 17,
        "name": "Cartoshka_",
        "avatar": "assets/images/icons/cartoskha_.png",
        "race": "hell",
        "description": "",
        "joinDate": "2025-10-28",
        "socials": {
            "discord": ".cartoshka_",
            "telegram": ""
        }
      }
    ];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
function updatePlayersStats(players) {
    const raceCounts = {
        hell: 0,
        heaven: 0,
        earth: 0,
        total: players.length
    };
    
    players.forEach(player => {
        if (raceCounts.hasOwnProperty(player.race)) {
            raceCounts[player.race]++;
        }
    });
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const hellElement = document.querySelector('.stat-badge.hell .stat-number2');
    const heavenElement = document.querySelector('.stat-badge.heaven .stat-number2');
    const earthElement = document.querySelector('.stat-badge.earth .stat-number2');
    const totalElement = document.querySelector('.stat-badge.total .stat-number2');
    
    if (hellElement) hellElement.textContent = raceCounts.hell;
    if (heavenElement) heavenElement.textContent = raceCounts.heaven;
    if (earthElement) earthElement.textContent = raceCounts.earth;
    if (totalElement) totalElement.textContent = raceCounts.total;
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
function animateCounter(element, target, duration) {
    let start = 0;
    const increment = target / (duration / 16);
    
    function update() {
        start += increment;
        if (start < target) {
            element.textContent = Math.floor(start);
            requestAnimationFrame(update);
        } else {
            element.textContent = target;
        }
    }
    
    update();
}

// –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω–∞
async function initRealTimePlayerCount() {
    try {
        const onlineCount = Math.floor(Math.random() * 50) + 100;
        updatePlayerCount(onlineCount);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–Ω–ª–∞–π–Ω–∞:', error);
    }
}

function updatePlayerCount(count) {
    const playerCountElement = document.querySelector('.player-count');
    if (playerCountElement) {
        playerCountElement.textContent = count;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getRaceName(race) {
    const races = {
        hell: '–î–µ–º–æ–Ω',
        heaven: '–ê–Ω–≥–µ–ª',
        earth: '–ó–µ–º–Ω–æ–π'
    };
    return races[race] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

function showLoadingState() {
    const grid = document.getElementById('playersGrid');
    if (grid) {
        grid.innerHTML = `
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...</p>
            </div>
        `;
    }
}

function hideLoadingState() {
    // –£–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –∏–≥—Ä–æ–∫–æ–≤
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
function loadDemoPlayersData() {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ...');
    const demoPlayers = getLocalPlayersData();
    renderPlayersGrid(demoPlayers);
    updatePlayersStats(demoPlayers);
}

// –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥ –∏–∑ players.html –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞:
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä–æ–∫–æ–≤');
    initPlayersPage();
    initPlayersFilter();
    initPlayersStats();
    loadPlayersData();
    initRealTimePlayerCount();
    initOnlineStatusSystem();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    initRealTimePlayerCount();
}, 3000);

