// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–µ–ª–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ JSON
document.addEventListener('DOMContentLoaded', function() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–µ–ª–µ–Ω–∏–π...');
    initSettlementsPage();
    initSettlementsStats();
    loadSettlementsData();
    initWorldMap();
    initSettlementsFilter();
    initMapInteractions();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–µ–ª–µ–Ω–∏–π
function initSettlementsPage() {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–µ–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
function initWorldMap() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...');
    
    const mapContainer = document.querySelector('.map-container');
    if (!mapContainer) {
        console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ–ª–µ–Ω–∏–π –∏–∑ JSON
async function loadSettlementsData() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ–ª–µ–Ω–∏–π...');
        showLoadingState();
        const settlementsData = await fetchSettlementsData();
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settlementsData);
        renderSettlementsGrid(settlementsData);
        updateSettlementsStats(settlementsData);
        updateWorldMap(settlementsData);
        hideLoadingState();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ–ª–µ–Ω–∏–π:', error);
        loadDemoSettlementsData();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ–ª–µ–Ω–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
async function fetchSettlementsData() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ settlements.json...');
        const response = await fetch('assets/json/settlements.json');
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
        
        if (!data.settlements || !Array.isArray(data.settlements)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ settlements');
        }
        
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.settlements.length} –ø–æ—Å–µ–ª–µ–Ω–∏–π`);
        return data.settlements;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:', error);
        throw error;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø–æ—Å–µ–ª–µ–Ω–∏–π
function renderSettlementsGrid(settlements) {
    const grid = document.getElementById('settlementsGrid');
    if (!grid) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç settlementsGrid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }

    console.log(`–†–µ–Ω–¥–µ—Ä–∏–º ${settlements.length} –ø–æ—Å–µ–ª–µ–Ω–∏–π`);
    grid.innerHTML = '';

    if (settlements.length === 0) {
        grid.innerHTML = `
            <div class="no-settlements-message">
                <h3>üè∞ –ü–æ—Å–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö</p>
            </div>
        `;
        return;
    }

    settlements.forEach((settlement, index) => {
        console.log(`–°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ—Å–µ–ª–µ–Ω–∏—è: ${settlement.name}`);
        const settlementCard = createSettlementCard(settlement);
        grid.appendChild(settlementCard);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            settlementCard.classList.add('visible');
        }, index * 100);
    });
}

// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç—ã
mapContainer.innerHTML = '';

// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ä—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
mapContainer.innerHTML = `
    <img src="assets/images/world-map.png" alt="–ö–∞—Ä—Ç–∞ –º–∏—Ä–∞" class="map-image" 
         onerror="this.src='assets/images/world-map.png'">
    <div class="map-overlay"></div>
    <div class="map-legend">
        <div class="legend-title">–õ–µ–≥–µ–Ω–¥–∞</div>
        <div class="legend-items">
            <div class="legend-item">
                <div class="legend-color hell"></div>
                <span>–ê–¥—Å–∫–∏–µ</span>
            </div>
            <div class="legend-item">
                <div class="legend-color heaven"></div>
                <span>–†–∞–π—Å–∫–∏–µ</span>
            </div>
            <div class="legend-item">
                <div class="legend-color earth"></div>
                <span>–ó–µ–º–Ω—ã–µ</span>
            </div>
            <div class="legend-item">
                <div class="legend-color glhell"></div>
                <span>‚óà –ê–¥—Å–∫–∏–µ</span>
            </div>
            <div class="legend-item">
                <div class="legend-color glheaven"></div>
                <span>‚óà –†–∞–π—Å–∫–∏–µ</span>
            </div>
            <div class="legend-item">
                <div class="legend-color glearth"></div>
                <span>‚óà –ó–µ–º–Ω—ã–µ</span>
            </div>
        </div>
    </div>
`;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–µ–ª–µ–Ω–∏—è
function createSettlementCard(settlement) {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', settlement);
    
    const card = document.createElement('div');
    card.className = `settlement-card ${settlement.race}-settlement`;
    card.setAttribute('data-race', settlement.race);
    card.setAttribute('data-settlement-id', settlement.id);
    
    const warStatus = getWarStatusInfo(settlement.war_status);
    
    card.innerHTML = `
        <div class="settlement-visual">
            <div class="settlement-image ${settlement.race}">
                <img src="${settlement.image}" alt="${settlement.name}" class="settlement-image-content"
                     onerror="this.style.display='none'; this.parentNode.innerHTML='${settlement.race === 'hell' ? 'üî•' : settlement.race === 'heaven' ? 'üëº' : 'üåç'}'">
                <div class="settlement-glow"></div>
                <div class="population-badge">üë• ${settlement.population}</div>
                <div class="level-badge">‚≠ê ${settlement.level}</div>
                <div class="war-status-badge ${warStatus.class}">${warStatus.icon} ${warStatus.text}</div>
            </div>
        </div>
        
        <div class="settlement-content">
            <div class="settlement-header">
                <h3 class="settlement-name">${settlement.name}</h3>
                <span class="settlement-race-badge race-${settlement.race}">${getRaceName(settlement.race)}</span>
            </div>
            
            <div class="settlement-leader">
                <span class="leader-label">üëë –õ–∏–¥–µ—Ä:</span>
                <span class="leader-name">${settlement.leader}</span>
            </div>
            
            <div class="settlement-location">
                <span class="location-icon">üìç</span>
                <span class="location-text">${settlement.location}</span>
            </div>
            
            <div class="settlement-description">
                <p>${settlement.description}</p>
            </div>
            
            <div class="settlement-features">
                <h4>üöÄ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</h4>
                <div class="features-list">
                    ${settlement.features.slice(0, 3).map(feature => 
                        `<span class="feature-tag">${feature}</span>`
                    ).join('')}
                    ${settlement.features.length > 3 ? 
                        `<span class="feature-tag">+${settlement.features.length - 3} –µ—â–µ</span>` : ''
                    }
                </div>
            </div>
            
            <div class="settlement-coordinates">
                <span class="coordinates-label">üìå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</span>
                <code class="coordinates-value">${settlement.coordinates.x} ${settlement.coordinates.y} ${settlement.coordinates.z}</code>
            </div>
        </div>
        
        <div class="settlement-footer">
            <span class="established-date">–û—Å–Ω–æ–≤–∞–Ω–æ ${formatDate(settlement.established)}</span>
            <button class="view-details-btn" data-settlement-id="${settlement.id}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
        </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    card.addEventListener('click', (e) => {
        if (!e.target.closest('.view-details-btn')) {
            showSettlementDetails(settlement);
        }
    });

    const detailsBtn = card.querySelector('.view-details-btn');
    if (detailsBtn) {
        detailsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            showSettlementDetails(settlement);
        });
    }

    return card;
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–µ–ª–µ–Ω–∏–∏
function showSettlementDetails(settlement) {
    console.log('–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å–µ–ª–µ–Ω–∏—è:', settlement);
    
    const warStatus = getWarStatusInfo(settlement.war_status);
    
    const modal = document.createElement('div');
    modal.className = 'settlement-modal';
    modal.innerHTML = `
        <div class="modal-content ${settlement.race}-theme">
            <div class="modal-header">
                <div class="settlement-image-large ${settlement.race}">
                    <img src="${settlement.image}" alt="${settlement.name}" class="settlement-image-large-content"
                         onerror="this.style.display='none'; this.parentNode.innerHTML='<span class=\"settlement-icon-large\">${settlement.race === 'hell' ? 'üî•' : settlement.race === 'heaven' ? 'üëº' : 'üåç'}</span>'">
                    <div class="population-badge">üë• ${settlement.population}</div>
                    <div class="level-badge">‚≠ê ${settlement.level}</div>
                    <div class="war-status-badge-large ${warStatus.class}">${warStatus.icon} ${warStatus.text}</div>
                </div>
                <div class="settlement-info">
                    <h2>${settlement.name}</h2>
                    <span class="settlement-race-badge">${getRaceName(settlement.race)}</span>
                    <div class="settlement-level">–£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è: ${settlement.level}</div>
                    <div class="settlement-location-modal">üìç ${settlement.location}</div>
                </div>
                <button class="modal-close">&times;</button>
            </div>
            
            <div class="modal-body">
                <div class="settlement-stats-detailed">
                    <div class="stat-item">
                        <span class="stat-label">–ù–∞—Å–µ–ª–µ–Ω–∏–µ</span>
                        <span class="stat-value">${settlement.population} –∂–∏—Ç–µ–ª–µ–π</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–£—Ä–æ–≤–µ–Ω—å</span>
                        <span class="stat-value">${settlement.level}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–°—Ç–∞—Ç—É—Å –≤–æ–π–Ω—ã</span>
                        <span class="stat-value ${warStatus.class}">${warStatus.icon} ${warStatus.text}</span>
                    </div>
                </div>
                
                <div class="settlement-details-grid">
                    <div class="detail-item">
                        <h4>üëë –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</h4>
                        <p><strong>–õ–∏–¥–µ—Ä:</strong> ${settlement.leader}</p>
                        <p><strong>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å:</strong> ${settlement.deputy}</p>
                        <button class="view-leader-profile" data-leader="${settlement.leader}">
                            –ü—Ä–æ—Ñ–∏–ª—å –ª–∏–¥–µ—Ä–∞
                        </button>
                    </div>
                    <div class="detail-item">
                        <h4>üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h4>
                        <p>${settlement.location}</p>
                        <div class="biome-info">
                            <span class="biome-tag">${getBiomeFromLocation(settlement.location)}</span>
                        </div>
                    </div>
                    <div class="detail-item">
                        <h4>üìÖ –û—Å–Ω–æ–≤–∞–Ω</h4>
                        <p>${formatDate(settlement.established)}</p>
                        <div class="age-info">
                            <span class="age-tag">${calculateSettlementAge(settlement.established)}</span>
                        </div>
                    </div>
                </div>
                
                <div class="settlement-description-detailed">
                    <h4>üìñ –û–ø–∏—Å–∞–Ω–∏–µ</h4>
                    <p>${settlement.description}</p>
                </div>
                
                <div class="settlement-residents">
                    <h4>üë• –ñ–∏—Ç–µ–ª–∏ (${settlement.residents.length})</h4>
                    <div class="residents-list">
                        ${settlement.residents.map(resident => `
                            <div class="resident-item">
                                <span class="resident-avatar">${getResidentAvatar(resident)}</span>
                                <span class="resident-name">${resident}</span>
                                ${resident === settlement.leader ? '<span class="leader-tag">üëë</span>' : ''}
                                ${resident === settlement.deputy ? '<span class="deputy-tag">‚≠ê</span>' : ''}
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <div class="settlement-features-detailed">
                    <h4>üöÄ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞</h4>
                    <div class="features-grid-detailed">
                        ${settlement.features.map(feature => `
                            <div class="feature-item-detailed">
                                <span class="feature-icon">üèóÔ∏è</span>
                                <div class="feature-content">
                                    <strong>${feature}</strong>
                                    <span class="feature-desc">${getFeatureDescription(feature)}</span>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <div class="settlement-map-section">
                    <h4>üó∫Ô∏è –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ</h4>
                    <div class="interactive-map">
                        <div class="map-overview">
                            <div class="map-point-large ${settlement.race}" 
                                 style="left: ${settlement.mapPosition.x}%; top: ${settlement.mapPosition.y}%">
                                <div class="point-glow-large"></div>
                            </div>
                        </div>
                        <div class="map-coordinates">
                            <div class="coordinate-item">
                                <span class="coord-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X:</span>
                                <code class="coord-value">${settlement.coordinates.x}</code>
                            </div>
                            <div class="coordinate-item">
                                <span class="coord-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Y:</span>
                                <code class="coord-value">${settlement.coordinates.y}</code>
                            </div>
                            <div class="coordinate-item">
                                <span class="coord-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Z:</span>
                                <code class="coord-value">${settlement.coordinates.z}</code>
                            </div>
                            <div class="coordinate-item">
                                <span class="coord-label">–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏:</span>
                                <code class="coord-value">/tp ${settlement.coordinates.x} ${settlement.coordinates.y} ${settlement.coordinates.z}</code>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="visit-btn" data-coords="${settlement.coordinates.x},${settlement.coordinates.y},${settlement.coordinates.z}">
                    üéÆ –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </button>
                <button class="waypoint-btn" data-settlement="${settlement.name}" data-coords="${settlement.coordinates.x},${settlement.coordinates.z}">
                    üìç –°–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É –ø—É—Ç–∏
                </button>
                <button class="share-btn" data-settlement="${settlement.name}">
                    üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    setTimeout(() => {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }, 10);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    modal.querySelector('.visit-btn').addEventListener('click', () => {
        showVisitInstructions(settlement);
    });

    modal.querySelector('.waypoint-btn').addEventListener('click', () => {
        createWaypoint(settlement);
    });

    modal.querySelector('.share-btn').addEventListener('click', () => {
        shareSettlement(settlement);
    });

    modal.querySelector('.view-leader-profile').addEventListener('click', () => {
        showLeaderProfile(settlement.leader);
    });

    modal.querySelector('.modal-close').addEventListener('click', closeModal);
    modal.addEventListener('click', (e) => {
        if (e.target === modal) closeModal();
    });

    function closeModal() {
        modal.classList.remove('active');
        setTimeout(() => {
            modal.remove();
            document.body.style.overflow = '';
        }, 300);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞
function initWorldMap() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞...');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ —Å –ø–æ—Å–µ–ª–µ–Ω–∏—è–º–∏
function updateWorldMap(settlements) {
    const mapContainer = document.querySelector('.map-container');
    if (!mapContainer) {
        console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏
    const oldPoints = mapContainer.querySelectorAll('.map-point');
    oldPoints.forEach(point => point.remove());

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ—á–∫–∏ –ø–æ—Å–µ–ª–µ–Ω–∏–π
    settlements.forEach(settlement => {
        const point = document.createElement('div');
        point.className = `map-point ${settlement.race}`;
        point.setAttribute('data-settlement', settlement.name);
        point.setAttribute('data-settlement-id', settlement.id);
        point.setAttribute('title', `${settlement.name}\nüëë ${settlement.leader}\nüë• ${settlement.population} –∂–∏—Ç–µ–ª–µ–π`);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ
        const pos = settlement.mapPosition || calculateMapPosition(settlement.coordinates);
        point.style.left = `${pos.x}%`;
        point.style.top = `${pos.y}%`;
        
        point.innerHTML = `
            <div class="point-pulse"></div>
            <div class="point-glow"></div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–æ—á–∫–∏
        point.addEventListener('click', (e) => {
            e.stopPropagation();
            showSettlementDetails(settlement);
        });

        point.addEventListener('mouseenter', function(e) {
            showMapTooltip(settlement, this);
        });

        point.addEventListener('mouseleave', function() {
            hideMapTooltip();
        });

        mapContainer.appendChild(point);
    });
}

// –ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
function showMapTooltip(settlement, pointElement) {
    let tooltip = document.querySelector('.map-tooltip');
    if (!tooltip) {
        tooltip = document.createElement('div');
        tooltip.className = 'map-tooltip';
        document.body.appendChild(tooltip);
    }

    const rect = pointElement.getBoundingClientRect();
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
    
    tooltip.innerHTML = `
        <div class="tooltip-content">
            <strong>${settlement.name}</strong>
            <span>${getRaceIcon(settlement.race)} ${getRaceName(settlement.race)}</span>
            <span>üëë ${settlement.leader}</span>
            <span>üë• ${settlement.population} –∂–∏—Ç–µ–ª–µ–π</span>
            <span>üìç ${settlement.location}</span>
            <span>‚≠ê –£—Ä–æ–≤–µ–Ω—å ${settlement.level}</span>
        </div>
    `;
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π
    const tooltipWidth = 200;
    const tooltipHeight = 150;
    
    let left = rect.left + scrollLeft + (rect.width / 2);
    let top = rect.top + scrollTop - tooltipHeight - 10;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
    if (left - tooltipWidth / 2 < 10) {
        left = tooltipWidth / 2 + 10;
    }
    if (left + tooltipWidth / 2 > window.innerWidth - 10) {
        left = window.innerWidth - tooltipWidth / 2 - 10;
    }
    if (top < 10) {
        top = rect.bottom + scrollTop + 10;
    }
    
    tooltip.style.left = `${left}px`;
    tooltip.style.top = `${top}px`;
    tooltip.style.transform = 'translateX(-50%)';
    tooltip.classList.add('visible');
}

// –°–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
function hideMapTooltip() {
    const tooltip = document.querySelector('.map-tooltip');
    if (tooltip) {
        tooltip.classList.remove('visible');
    }
}

// –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º Minecraft
function calculateMapPosition(coords) {
    // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä—ã –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã
    const mapSizeX = 5000; // –†–∞–∑–º–µ—Ä –º–∏—Ä–∞ –ø–æ X
    const mapSizeZ = 5000; // –†–∞–∑–º–µ—Ä –º–∏—Ä–∞ –ø–æ Z
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Minecraft –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const x = ((coords.x + mapSizeX/2) / mapSizeX) * 100;
    const z = ((coords.z + mapSizeZ/2) / mapSizeZ) * 100;
    
    return {
        x: Math.max(2, Math.min(98, x)),
        y: Math.max(2, Math.min(98, z))
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã
function initMapInteractions() {
    const mapContainer = document.querySelector('.map-container');
    if (!mapContainer) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    let scale = 1;
    const minScale = 0.5;
    const maxScale = 3;
    let isDragging = false;
    let startX, startY, scrollLeft, scrollTop;

    mapContainer.style.cursor = 'grab';
    mapContainer.style.overflow = 'hidden';

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
    mapContainer.addEventListener('wheel', (e) => {
        e.preventDefault();
        const delta = -e.deltaY * 0.01;
        const oldScale = scale;
        scale = Math.min(maxScale, Math.max(minScale, scale + delta));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        const rect = mapContainer.getBoundingClientRect();
        const x = (e.clientX - rect.left) / oldScale;
        const y = (e.clientY - rect.top) / oldScale;
        
        mapContainer.style.transform = `scale(${scale})`;
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        const newX = x * scale;
        const newY = y * scale;
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    });

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
    mapContainer.addEventListener('mousedown', (e) => {
        isDragging = true;
        mapContainer.style.cursor = 'grabbing';
        startX = e.pageX - mapContainer.offsetLeft;
        startY = e.pageY - mapContainer.offsetTop;
        scrollLeft = mapContainer.scrollLeft;
        scrollTop = mapContainer.scrollTop;
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
        mapContainer.style.cursor = 'grab';
    });

    document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        e.preventDefault();
        const x = e.pageX - mapContainer.offsetLeft;
        const y = e.pageY - mapContainer.offsetTop;
        const walkX = (x - startX) * 2;
        const walkY = (y - startY) * 2;
        mapContainer.scrollLeft = scrollLeft - walkX;
        mapContainer.scrollTop = scrollTop - walkY;
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function initSettlementsFilter() {
    // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Å–µ–ª–µ–Ω–∏–π...');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getWarStatusInfo(status) {
    const statuses = {
        'peace': { text: '–ú–∏—Ä', class: 'peace', icon: 'üïäÔ∏è' },
        'defensive': { text: '–û–±–æ—Ä–æ–Ω–∞', class: 'defensive', icon: 'üõ°Ô∏è' },
        'aggressive': { text: '–ê–≥—Ä–µ—Å—Å–∏—è', class: 'aggressive', icon: '‚öîÔ∏è' },
        'neutral': { text: '–ù–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç', class: 'neutral', icon: '‚öñÔ∏è' }
    };
    return statuses[status] || statuses['neutral'];
}

function getRaceName(race) {
    const races = {
        'hell': '–ê–Ω–≥–µ–ª',
        'heaven': '–î–µ–º–æ–Ω', 
        'earth': '–ó–µ–º–Ω–æ–π',
        'glhell': '‚óà –ê–Ω–≥–µ–ª',
        'glheaven': '‚óà –î–µ–º–æ–Ω', 
        'glearth': '‚óà –ó–µ–º–Ω–æ–π',
    };
    return races[race] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getBiomeFromLocation(location) {
    const biomes = {
        '–ù–∏–∂–Ω–∏–π –º–∏—Ä': 'üî• –ù–µ–∑–µ—Ä',
        '–≠–Ω–¥': '‚ú® –≠–Ω–¥',
        '–î–∂—É–Ω–≥–ª–∏': 'üåø –î–∂—É–Ω–≥–ª–∏',
        '–õ–µ–¥—è–Ω—ã–µ –ø–∏–∫–∏': '‚ùÑÔ∏è –õ–µ–¥—è–Ω—ã–µ –ø–∏–∫–∏',
        '–ì–æ—Ä—ã': '‚õ∞Ô∏è –ì–æ—Ä—ã',
        '–ü–æ–¥–∑–µ–º–µ–ª—å–µ': 'üï≥Ô∏è –ü–æ–¥–∑–µ–º–µ–ª—å–µ'
    };
    return biomes[location] || 'üåç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function calculateSettlementAge(establishedDate) {
    const established = new Date(establishedDate);
    const now = new Date();
    const diffTime = Math.abs(now - established);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 30) return 'üÜï –ù–æ–≤–æ–µ';
    if (diffDays < 90) return 'üìà –†–∞–∑–≤–∏–≤–∞—é—â–µ–µ—Å—è';
    if (diffDays < 180) return 'üèõÔ∏è –£—Å—Ç–æ—è–≤—à–µ–µ—Å—è';
    return 'üè∞ –î—Ä–µ–≤–Ω–µ–µ';
}

function getFeatureDescription(feature) {
    const descriptions = {
        '–õ–∞–≤–æ–≤—ã–µ –≤–æ–¥–æ–ø–∞–¥—ã': '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞—â–∏—Ç–Ω—ã–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è',
        '–û–±—Å–∏–¥–∏–∞–Ω–æ–≤—ã–µ —Å—Ç–µ–Ω—ã': '–ü—Ä–æ—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–æ–±–æ–≤',
        '–ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–µ —Ä—É–¥–Ω–∏–∫–∏': '–î–æ–±—ã—á–∞ —Ä–µ–¥–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
        '–ü–æ—Ä—Ç–∞–ª –≤ –û–≤–µ—Ä–≤–æ—Ä–ª–¥': '–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏',
        '–ü–∞—Ä—è—â–∏–µ –æ—Å—Ç—Ä–æ–≤–∞': '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤ –Ω–µ–±–µ',
        '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∞–≥–∏–∏ –∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π',
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–µ—Ä–º—ã': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤',
        '–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å': '–¶–µ–Ω—Ç—Ä —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        '–°–∞–¥—ã —Ö–æ—Ä—É—Å–∞': '–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ —ç–ª–∏—Ç–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
        '–û–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è': '–ò–∑—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –∏ –ø–ª–∞–Ω–µ—Ç'
    };
    return descriptions[feature] || '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–µ–ª–µ–Ω–∏—è';
}

function getResidentAvatar(residentName) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–≤–∞—Ç–∞—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    return 'üë§';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

function showLoadingState() {
    const grid = document.getElementById('settlementsGrid');
    if (grid) {
        grid.innerHTML = `
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–µ–ª–µ–Ω–∏–π...</p>
            </div>
        `;
    }
}

function hideLoadingState() {
    // –£–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ
}

function animateCounter(element, target, duration) {
    let start = 0;
    const increment = target / (duration / 16);
    
    function update() {
        start += increment;
        if (start < target) {
            element.textContent = Math.floor(start);
            requestAnimationFrame(update);
        } else {
            element.textContent = target;
        }
    }
    
    update();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
function showVisitInstructions(settlement) {
    const command = `/tp ${settlement.coordinates.x} ${settlement.coordinates.y} ${settlement.coordinates.z}`;
    
    const notification = document.createElement('div');
    notification.className = 'visit-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <h4>üéÆ –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ ${settlement.name}</h4>
            <p>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —á–∞—Ç Minecraft:</p>
            <pre>${command}</pre>
            <div class="notification-buttons">
                <button class="copy-coords-btn">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É</button>
                <button class="close-notification">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        </div>
    `;

    document.body.appendChild(notification);
    setTimeout(() => notification.classList.add('active'), 10);

    notification.querySelector('.copy-coords-btn').addEventListener('click', () => {
        navigator.clipboard.writeText(command).then(() => {
            showToast('‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        });
    });

    notification.querySelector('.close-notification').addEventListener('click', () => {
        notification.classList.remove('active');
        setTimeout(() => notification.remove(), 300);
    });
}

function createWaypoint(settlement) {
    const waypointData = {
        name: settlement.name,
        x: settlement.coordinates.x,
        z: settlement.coordinates.z,
        color: getRaceColor(settlement.race)
    };

    const waypointText = JSON.stringify(waypointData, null, 2);
    
    navigator.clipboard.writeText(waypointText).then(() => {
        showToast(`‚úÖ –¢–æ—á–∫–∞ –ø—É—Ç–∏ "${settlement.name}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!`);
    });
}

function shareSettlement(settlement) {
    const shareText = `üè∞ ${settlement.name} - ${settlement.description}\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${settlement.coordinates.x} ${settlement.coordinates.y} ${settlement.coordinates.z}\nüëë –õ–∏–¥–µ—Ä: ${settlement.leader}`;
    
    navigator.clipboard.writeText(shareText).then(() => {
        showToast('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–µ–ª–µ–Ω–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    });
}

function showLeaderProfile(leaderName) {
    showToast(`üëë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ—Ä–µ: ${leaderName}`);
}

function getRaceColor(race) {
    const colors = {
        'hell': '#ff4444',
        'heaven': '#4fc3f7', 
        'earth': '#8bc34a'
    };
    return colors[race] || '#7e57c2';
}

function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast-notification';
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.add('show');
    }, 100);
    
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            toast.remove();
        }, 300);
    }, 3000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
function loadDemoSettlementsData() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö...');
    const demoSettlements = [
        {
            id: 1,
            name: "–î–µ–º–æ –ü–æ—Å–µ–ª–µ–Ω–∏–µ",
            image: "assets/images/settlements/default.png",
            leader: "Demo_Leader",
            deputy: "Demo_Deputy",
            race: "earth",
            description: "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            population: 10,
            residents: ["Demo_Leader", "Demo_Deputy"],
            coordinates: { x: 0, y: 64, z: 0 },
            war_status: "peace",
            established: "2023-01-01",
            level: 3,
            features: ["–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–§–µ—Ä–º—ã"],
            location: "–†–∞–≤–Ω–∏–Ω—ã"
        }
    ];
    renderSettlementsGrid(demoSettlements);
    updateSettlementsStats(demoSettlements);
    updateWorldMap(demoSettlements);
}

// –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ settlements.js - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Å–µ–ª–µ–Ω–∏–π
function initSettlementsFilter() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Å–µ–ª–µ–Ω–∏–π...');
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filterContainer = document.createElement('div');
    filterContainer.className = 'settlements-filter';
    filterContainer.innerHTML = `
        <div class="filter-controls">
            <input type="text" class="settlements-search" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ—Å–µ–ª–µ–Ω–∏—è..." id="settlementsSearch">
            
            <div class="filter-buttons">
                <button class="settlement-filter-btn active" data-filter="all">
                    <span class="filter-icon">üåü</span>
                    –í–°–ï
                </button>
                <button class="settlement-filter-btn" data-filter="hell">
                    <span class="filter-icon">üî•</span>
                    –ê–î–°–ö–ò–ï
                </button>
                <button class="settlement-filter-btn" data-filter="heaven">
                    <span class="filter-icon">üëº</span>
                    –†–ê–ô–°–ö–ò–ï
                </button>
                <button class="settlement-filter-btn" data-filter="earth">
                    <span class="filter-icon">üåç</span>
                    –ó–ï–ú–ù–´–ï
                </button>
            </div>
        </div>
        
        <div class="advanced-filters">
            <div class="filter-group">
                <label>üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ:</label>
                <select class="population-filter">
                    <option value="all">–í—Å–µ</option>
                    <option value="small">–ú–∞–ª—ã–µ (1-10)</option>
                    <option value="medium">–°—Ä–µ–¥–Ω–∏–µ (11-25)</option>
                    <option value="large">–ö—Ä—É–ø–Ω—ã–µ (26+)</option>
                </select>
            </div>
            <div class="filter-group">
                <label>‚≠ê –£—Ä–æ–≤–µ–Ω—å:</label>
                <select class="level-filter">
                    <option value="all">–í—Å–µ</option>
                    <option value="1-2">‚≠ê-‚≠ê‚≠ê</option>
                    <option value="3-4">‚≠ê‚≠ê‚≠ê-‚≠ê‚≠ê‚≠ê‚≠ê</option>
                    <option value="5">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
                </select>
            </div>
            <div class="filter-group">
                <label>üõ°Ô∏è –°—Ç–∞—Ç—É—Å –≤–æ–π–Ω—ã:</label>
                <select class="war-filter">
                    <option value="all">–í—Å–µ</option>
                    <option value="peace">üïäÔ∏è –ú–∏—Ä</option>
                    <option value="defensive">üõ°Ô∏è –û–±–æ—Ä–æ–Ω–∞</option>
                    <option value="aggressive">‚öîÔ∏è –ê–≥—Ä–µ—Å—Å–∏—è</option>
                    <option value="neutral">‚öñÔ∏è –ù–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç</option>
                </select>
            </div>
        </div>
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ —Å–µ—Ç–∫–æ–π –ø–æ—Å–µ–ª–µ–Ω–∏–π
    const grid = document.getElementById('settlementsGrid');
    if (grid && grid.parentNode) {
        grid.parentNode.insertBefore(filterContainer, grid);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    initFilterHandlers();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function initFilterHandlers() {
    // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Ä–∞—Å–µ
    const filterButtons = document.querySelectorAll('.settlement-filter-btn');
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            filterButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            const filter = this.getAttribute('data-filter');
            applyFilters();
        });
    });

    // –ü–æ–∏—Å–∫
    const searchInput = document.querySelector('.settlements-search');
    if (searchInput) {
        searchInput.addEventListener('input', () => {
            applyFilters();
        });
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const advancedFilters = document.querySelectorAll('.advanced-filters select');
    advancedFilters.forEach(select => {
        select.addEventListener('change', () => {
            applyFilters();
        });
    });
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilters() {
    const activeRaceFilter = document.querySelector('.settlement-filter-btn.active').getAttribute('data-filter');
    const searchTerm = document.querySelector('.settlements-search').value.toLowerCase();
    const populationFilter = document.querySelector('.population-filter').value;
    const levelFilter = document.querySelector('.level-filter').value;
    const warFilter = document.querySelector('.war-filter').value;

    const settlementCards = document.querySelectorAll('.settlement-card');
    
    settlementCards.forEach(card => {
        const race = card.getAttribute('data-race');
        const name = card.querySelector('.settlement-name').textContent.toLowerCase();
        const leader = card.querySelector('.leader-name').textContent.toLowerCase();
        const location = card.querySelector('.location-text').textContent.toLowerCase();
        const population = parseInt(card.querySelector('.population-badge').textContent.match(/\d+/)[0]);
        const level = parseInt(card.querySelector('.level-badge').textContent.match(/\d+/)[0]);
        const warStatus = card.querySelector('.war-status-badge').textContent.toLowerCase();

        let show = true;

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å–µ
        if (activeRaceFilter !== 'all' && race !== activeRaceFilter) {
            show = false;
        }

        // –ü–æ–∏—Å–∫
        if (searchTerm && !name.includes(searchTerm) && !leader.includes(searchTerm) && !location.includes(searchTerm)) {
            show = false;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
        if (populationFilter !== 'all') {
            if (populationFilter === 'small' && population > 10) show = false;
            if (populationFilter === 'medium' && (population <= 10 || population > 25)) show = false;
            if (populationFilter === 'large' && population <= 25) show = false;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é
        if (levelFilter !== 'all') {
            if (levelFilter === '1-2' && level > 2) show = false;
            if (levelFilter === '3-4' && (level < 3 || level > 4)) show = false;
            if (levelFilter === '5' && level < 5) show = false;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –≤–æ–π–Ω—ã
        if (warFilter !== 'all') {
            const statusMap = {
                'peace': '–º–∏—Ä',
                'defensive': '–æ–±–æ—Ä–æ–Ω–∞', 
                'aggressive': '–∞–≥—Ä–µ—Å—Å–∏—è',
                'neutral': '–Ω–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç'
            };
            if (!warStatus.includes(statusMap[warFilter])) {
                show = false;
            }
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        if (show) {
            card.style.display = 'flex';
            setTimeout(() => card.classList.add('visible'), 50);
        } else {
            card.classList.remove('visible');
            setTimeout(() => card.style.display = 'none', 300);
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    updateFilteredStats();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function updateFilteredStats() {
    const visibleCards = document.querySelectorAll('.settlement-card[style*="display: flex"]');
    const totalPopulation = Array.from(visibleCards).reduce((sum, card) => {
        return sum + parseInt(card.querySelector('.population-badge').textContent.match(/\d+/)[0]);
    }, 0);
    
    const activeProjects = Array.from(visibleCards).filter(card => {
        const level = parseInt(card.querySelector('.level-badge').textContent.match(/\d+/)[0]);
        return level >= 3;
    }).length;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const statNumbers = document.querySelectorAll('.settlements-stats .stat-number');
    if (statNumbers[0]) statNumbers[0].textContent = visibleCards.length;
    if (statNumbers[1]) statNumbers[1].textContent = totalPopulation;
    if (statNumbers[2]) statNumbers[2].textContent = activeProjects;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ—á–µ–∫ –ø—É—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–æ–≤
function createWaypoint(settlement) {
    const waypointData = {
        name: settlement.name.replace(/ /g, '_'),
        x: settlement.coordinates.x,
        y: settlement.coordinates.y,
        z: settlement.coordinates.z,
        color: getRaceColor(settlement.race),
        server: 'f27.joinserver.xyz:25835',
        created: new Date().toISOString()
    };

    // –§–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–æ–≤
    const waypointFormats = {
        journeyMap: JSON.stringify(waypointData, null, 2),
        xaero: `${waypointData.name}:${waypointData.x}:${waypointData.y}:${waypointData.z}:${waypointData.color.replace('#', '')}:true:0`,
        voxelMap: `name:${waypointData.name},x:${waypointData.x},y:${waypointData.y},z:${waypointData.z},enabled:true,red:${hexToRgb(waypointData.color).r},green:${hexToRgb(waypointData.color).g},blue:${hexToRgb(waypointData.color).b}`
    };

    showWaypointInstructions(settlement, waypointFormats);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è HEX –≤ RGB
function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : { r: 126, g: 87, b: 194 };
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–æ—á–µ–∫ –ø—É—Ç–∏
function showWaypointInstructions(settlement, waypointFormats) {
    const instructions = `
üéÆ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ—á–∫–∏ –ø—É—Ç–∏:

–î–ª—è JourneyMap:
1. –ù–∞–∂–º–∏—Ç–µ 'J' –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª Waypoints
3. –ù–∞–∂–º–∏—Ç–µ "Import" –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç:
\`\`\`json
${waypointFormats.journeyMap}
\`\`\`

–î–ª—è Xaero's Minimap:
1. –ù–∞–∂–º–∏—Ç–µ 'Y' –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è waypoints
2. –ù–∞–∂–º–∏—Ç–µ "Import from clipboard"
3. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç:
${waypointFormats.xaero}

–î–ª—è VoxelMap:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É (M)
2. –ù–∞–∂–º–∏—Ç–µ "Waypoints"
3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ—á–∫—É –ø—É—Ç–∏

–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: X: ${settlement.coordinates.x} Y: ${settlement.coordinates.y} Z: ${settlement.coordinates.z}
    `;

    const notification = document.createElement('div');
    notification.className = 'waypoint-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <h4>üìç –¢–æ—á–∫–∞ –ø—É—Ç–∏ "${settlement.name}"</h4>
            <div class="waypoint-format-selector">
                <button class="format-btn active" data-format="journeyMap">JourneyMap</button>
                <button class="format-btn" data-format="xaero">Xaero's Map</button>
                <button class="format-btn" data-format="voxelMap">VoxelMap</button>
            </div>
            <pre class="waypoint-code">${waypointFormats.journeyMap}</pre>
            <div class="notification-buttons">
                <button class="copy-waypoint-btn" data-text="${waypointFormats.journeyMap}">
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button class="copy-coords-btn" data-coords="${settlement.coordinates.x},${settlement.coordinates.y},${settlement.coordinates.z}">
                    üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                </button>
                <button class="close-notification">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        </div>
    `;

    document.body.appendChild(notification);
    setTimeout(() => notification.classList.add('active'), 10);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    notification.querySelectorAll('.format-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            notification.querySelectorAll('.format-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            const format = this.getAttribute('data-format');
            const codeElement = notification.querySelector('.waypoint-code');
            const copyBtn = notification.querySelector('.copy-waypoint-btn');
            
            codeElement.textContent = waypointFormats[format];
            copyBtn.setAttribute('data-text', waypointFormats[format]);
        });
    });

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ waypoint
    notification.querySelector('.copy-waypoint-btn').addEventListener('click', function() {
        const text = this.getAttribute('data-text');
        navigator.clipboard.writeText(text).then(() => {
            const originalText = this.textContent;
            this.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
            setTimeout(() => this.textContent = originalText, 2000);
        });
    });

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    notification.querySelector('.copy-coords-btn').addEventListener('click', function() {
        const coords = this.getAttribute('data-coords');
        navigator.clipboard.writeText(coords).then(() => {
            const originalText = this.textContent;
            this.textContent = '‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!';
            setTimeout(() => this.textContent = originalText, 2000);
        });
    });

    notification.querySelector('.close-notification').addEventListener('click', () => {
        notification.classList.remove('active');
        setTimeout(() => notification.remove(), 300);
    });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∏–¥–µ—Ä–∞ –ø–æ—Å–µ–ª–µ–Ω–∏—è
function showLeaderProfile(leaderName) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–≤—è–∑—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–æ–≤
    const leaderInfo = {
        name: leaderName,
        race: getLeaderRace(leaderName),
        joinDate: "2023-01-15",
        achievements: ["–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–µ–ª–µ–Ω–∏—è", "–ú–∞—Å—Ç–µ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "–õ–∏–¥–µ—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"]
    };

    const notification = document.createElement('div');
    notification.className = 'leader-profile-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <h4>üëë –ü—Ä–æ—Ñ–∏–ª—å –ª–∏–¥–µ—Ä–∞</h4>
            <div class="leader-info">
                <div class="leader-avatar ${leaderInfo.race}">
                    <span class="avatar-icon">${getRaceIcon(leaderInfo.race)}</span>
                </div>
                <div class="leader-details">
                    <h5>${leaderInfo.name}</h5>
                    <p>–†–∞—Å–∞: ${getRaceName(leaderInfo.race)}</p>
                    <p>–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å: ${formatDate(leaderInfo.joinDate)}</p>
                </div>
            </div>
            <div class="leader-achievements">
                <h5>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h5>
                <ul>
                    ${leaderInfo.achievements.map(ach => `<li>${ach}</li>`).join('')}
                </ul>
            </div>
            <button class="close-notification">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    `;

    document.body.appendChild(notification);
    setTimeout(() => notification.classList.add('active'), 10);

    notification.querySelector('.close-notification').addEventListener('click', () => {
        notification.classList.remove('active');
        setTimeout(() => notification.remove(), 300);
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–∏–¥–µ—Ä–æ–≤
function getLeaderRace(leaderName) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const raceMap = {
        '_kot_baris_': 'glhell',
        'stalker_hunter_': 'glheaven',
        'amidamaru3434': 'glearth',
        'darcklord': 'hell',
        'ddanilkaaaa': 'heaven',
        'deace': 'earth',
        'hyutjnh': 'hell',
        'jdh16': 'heaven',
        'maxxaumka': 'earth',
        'nicotine': 'hell',
        'pandamom': 'heaven',
        'snekky_offc': 'earth',
    };
    return raceMap[leaderName] || 'earth';
}

function getRaceIcon(race) {
    const icons = {
        'hell': 'üî•',
        'heaven': 'üëº',
        'earth': 'üåç',
        'glhell': 'üî•',
        'glheaven': 'üëº',
        'glearth': 'üåç'
    };
    return icons[race] || 'üë§';
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.SettlementsApp = {
    loadSettlementsData,
    showSettlementDetails,
    applyFilters,
    updateSettlementsStats,
    createWaypoint,
    shareSettlement,
    showLeaderProfile
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
console.log('Settlements module loaded');