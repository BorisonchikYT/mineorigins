// JSON –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ–ª–µ–Ω–∏—è—Ö
const settlementsData = {
    "settlements": [
        {
            "id": 1,
            "name": "–§—Ä–∏–∫–ë—É—Ä–≥—Å–∫–∞—è –ò–º–ø–µ—Ä–∏—è",
            "image": "assets/images/settlements/frickburg.png",
            "leader": "_Kot_Baris_",
            "deputy": "pandamom",
            "race": "earth",
            "description": "üí™ –ú—ã —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ—Ö! –°—Ç—Ä–æ–∏–º –∏–∑ –±–ª–æ–∫–æ–≤ –∏–º–ø–µ—Ä–∏–∏, –∫—É–µ–º –∏–∑ –ø–æ–±–µ–¥ –ª–µ–≥–µ–Ω–¥—ã ‚Äì –∑–∞ –§—Ä–∏–∫–±—É—Ä–≥, –∑–∞ –ø–æ–±–µ–¥—É! –í–µ–ª–∏–∫–∞—è –∑–µ–º–Ω–∞—è —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –ª—É—á—à–∏—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –∏ –≤–æ–∏–Ω–æ–≤.",
            "population": 8,
            "residents": ["_Kot_Baris_", "pandamom", "darcklord", "ddanilkaaaa", "jdh16", "maxxaumka", "nicotine", "tropic_yt2021"],
            "coordinates": { "x": 30, "y": 86, "z": 1018 },
            "war_status": "defensive",
            "established": "2025-10-11",
            "level": 4,
            "features": ["–°–≤–æ–±–æ–¥–∞ —Å–ª–æ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π", "–ê–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –ª—é–¥–∏", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–µ—Ä–º—ã", "–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å", "–û–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–µ–Ω—ã"],
            "location": "–ó–µ–º–ª—è",
            "mapPosition": { "x": 50, "y": 84 }
        },
        {
            "id": 2,
            "name": "–õ–æ–≥–æ–≤–æ –•–∞–Ω—Ç–µ—Ä–∞",
            "image": "assets/images/settlements/hunter_lair.png",
            "leader": "stalker_hunter_",
            "deputy": "Yaryna",
            "race": "hell",
            "description": "–ö –¥–µ–º–æ–Ω–∞–º –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–µ —Ä–∞–¥–∏ –ø–æ–º–æ—â–∏ ‚Äî –∞ —Ä–∞–¥–∏ —Å–¥–µ–ª–∫–∏. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∑–¥–µ—Å—å –∏–º–µ–µ—Ç —Ü–µ–Ω—É, –∫–∞–∂–¥–∞—è —É–ª—ã–±–∫–∞ ‚Äî –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –∞ –∫–∞–∂–¥–∞—è –∏—Å–∫—Ä–∞ ‚Äî –æ–±–µ—â–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –æ–≥–Ω—è. –¢–∞–π–Ω–æ–µ —É–±–µ–∂–∏—â–µ –≤ –≥–ª—É–±–∏–Ω–∞—Ö –ø—Ä–µ–∏—Å–ø–æ–¥–Ω–µ–π.",
            "population": 3,
            "residents": ["stalker_hunter_", "Yaryna", "Lemonchik"],
            "coordinates": { "x": 212, "y": 80, "z": 495 },
            "war_status": "neutral",
            "established": "2025-10-12",
            "level": 3,
            "features": ["–ñ–∏–≤—É—Ç –¥–µ–º–æ–Ω—ã –∏ –∑–µ–º–Ω—ã–µ", "–õ–∞–≤–æ–≤—ã–µ –≤–æ–¥–æ–ø–∞–¥—ã", "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤—ã–µ —Å—Ç–µ–Ω—ã", "–ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–µ —Ä—É–¥–Ω–∏–∫–∏"],
            "location": "–ü–æ–¥ –∑–µ–º–ª—ë–π",
            "mapPosition": { "x": 57, "y": 70 }
        },
        {
            "id": 3,
            "name": "–ë–∞–∑–∞ –¢—Ä–æ–ø–∏–∫–∞",
            "image": "assets/images/settlements/tropic_base.png",
            "leader": "tropic_yt2021",
            "deputy": "",
            "race": "earth",
            "description": "–£—é—Ç–Ω–∞—è –±–∞–∑–∞ –≤ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–æ–º –±–∏–æ–º–µ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.",
            "population": 1,
            "residents": ["tropic_yt2021"],
            "coordinates": { "x": 150, "y": 64, "z": 800 },
            "war_status": "peace",
            "established": "2025-10-13",
            "level": 2,
            "features": ["–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —Å–∞–¥", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–µ—Ä–º—ã", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"],
            "location": "–ó–µ–º–ª—è",
            "mapPosition": { "x": 80, "y": 62 }
        },
        {
            "id": 4,
            "name": "–í–î–ù–•",
            "image": "assets/images/settlements/vdnx.png",
            "leader": "maxxaumka",
            "deputy": "",
            "race": "earth",
            "description": "–í—ã—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ - –º–µ—Å—Ç–æ –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –ª—É—á—à–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.",
            "population": 2,
            "residents": ["maxxaumka", "nicotine"],
            "coordinates": { "x": 100, "y": 70, "z": 600 },
            "war_status": "peace",
            "established": "2025-10-14",
            "level": 3,
            "features": ["–í—ã—Å—Ç–∞–≤–æ—á–Ω—ã–µ –ø–∞–≤–∏–ª—å–æ–Ω—ã", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã", "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä"],
            "location": "–ó–µ–º–ª—è",
            "mapPosition": { "x": 59, "y": 65 }
        },
        {
            "id": 5,
            "name": "–ë–∞–∑–∞ –ê–Ω–≥–µ–ª–æ–≤",
            "image": "assets/images/settlements/angel_base.png",
            "leader": "Angel_Player",
            "deputy": "",
            "race": "heaven",
            "description": "–ù–µ–±–µ—Å–Ω–æ–µ —Å–≤—è—Ç–∏–ª–∏—â–µ –≥–¥–µ –∞–Ω–≥–µ–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –±–∞–ª–∞–Ω—Å –∏ –≥–∞—Ä–º–æ–Ω–∏—é –º–∏—Ä–∞. –ú–µ—Å—Ç–æ —Å–∏–ª—ã –∏ –º—É–¥—Ä–æ—Å—Ç–∏.",
            "population": 2,
            "residents": ["Angel_Player", "Celestial_Being"],
            "coordinates": { "x": -300, "y": 120, "z": 200 },
            "war_status": "neutral",
            "established": "2025-10-15",
            "level": 4,
            "features": ["–ü–∞—Ä—è—â–∏–µ –æ—Å—Ç—Ä–æ–≤–∞", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π", "–°–∞–¥—ã —Ö–æ—Ä—É—Å–∞", "–û–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è"],
            "location": "–ù–µ–±–µ—Å–∞",
            "mapPosition": { "x": 35, "y": 50 }
        },
        {
            "id": 6,
            "name": "–ú–∞–∫—Å–∏–º–∫–∞",
            "image": "assets/images/settlements/maximka.png",
            "leader": "maxxaumka",
            "deputy": "",
            "race": "earth",
            "description": "–õ–∏—á–Ω–∞—è –±–∞–∑–∞ –∏–≥—Ä–æ–∫–∞ maxxaumka —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∞–º–∏.",
            "population": 1,
            "residents": ["maxxaumka"],
            "coordinates": { "x": -500, "y": 65, "z": -200 },
            "war_status": "peace",
            "established": "2025-10-16",
            "level": 2,
            "features": ["–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã", "–°–µ–∫—Ä–µ—Ç–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "–¢–µ—Å—Ç–æ–≤—ã–µ –∑–æ–Ω—ã"],
            "location": "–ó–µ–º–ª—è",
            "mapPosition": { "x": 8, "y": 30 }
        }
    ],
    "stats": {
        "total_settlements": 6,
        "total_residents": 17,
        "race_distribution": {
            "earth": 4,
            "hell": 1,
            "heaven": 1
        }
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentFilter = 'all';
let currentSearch = '';
let favoriteSettlements = JSON.parse(localStorage.getItem('favoriteSettlements')) || [];

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', function() {
    // console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–µ–ª–µ–Ω–∏–π...');
    initSettlementsPage();
    initEventListeners();
    renderAllSettlements();
    updateStatistics();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function initSettlementsPage() {
    // console.log('‚ú® –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–µ–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
    const title = document.querySelector('.section-title');
    if (title) {
        title.style.background = 'linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #feca57, #ff9ff3, #54a0ff)';
        title.style.backgroundSize = '400% 400%';
        title.style.webkitBackgroundClip = 'text';
        title.style.backgroundClip = 'text';
        title.style.color = 'transparent';
        title.style.animation = 'premiumGradient 8s ease infinite';
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    initWorldMap();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventListeners() {
    // –ü–æ–∏—Å–∫
    const searchInput = document.getElementById('settlementsSearch');
    if (searchInput) {
        searchInput.addEventListener('input', function(e) {
            currentSearch = e.target.value.toLowerCase();
            filterSettlements();
        });
    }

    // –§–∏–ª—å—Ç—Ä—ã
    const filterButtons = document.querySelectorAll('.settlement-filter-btn');
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            filterButtons.forEach(btn => btn.classList.remove('active'));
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
            this.classList.add('active');
            
            currentFilter = this.getAttribute('data-filter');
            filterSettlements();
        });
    });

    // –¢–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    const mapPoints = document.querySelectorAll('.map-point');
    mapPoints.forEach(point => {
        point.addEventListener('click', function() {
            const settlementName = this.getAttribute('data-settlement');
            showSettlementOnMap(settlementName);
        });
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å–µ–ª–µ–Ω–∏–π
function renderAllSettlements() {
    const grid = document.getElementById('settlementsGrid');
    if (!grid) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç settlementsGrid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }

    grid.innerHTML = '';
    
    settlementsData.settlements.forEach(settlement => {
        const settlementCard = createSettlementCard(settlement);
        grid.appendChild(settlementCard);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–µ–ª–µ–Ω–∏—è
function createSettlementCard(settlement) {
    const card = document.createElement('div');
    card.className = `settlement-card ${settlement.race}-settlement`;
    card.setAttribute('data-race', settlement.race);
    card.setAttribute('data-settlement-id', settlement.id);
    
    const warStatus = getWarStatusInfo(settlement.war_status);
    const isFavorite = favoriteSettlements.includes(settlement.id);
    
    card.innerHTML = `
        <div class="settlement-visual">
            <div class="settlement-image ${settlement.race}">
                <img src="${settlement.image}" alt="${settlement.name}" 
                     class="settlement-banner-link" 
                     onerror="this.src='assets/images/settlements/default_settlement.png'">
                <div class="settlement-glow"></div>
                <div class="population-badge">
                    <img src="assets/images/icons/index_icon_players.gif" class="resized-image3"> 
                    ${settlement.population}
                </div>
                <div class="war-status-badge ${warStatus.class}">
                    ${warStatus.icon} ${warStatus.text}
                </div>
                <button class="favorite-btn ${isFavorite ? 'favorited' : ''}" 
                        onclick="toggleFavorite(${settlement.id}, this)">
                    ${isFavorite ? '‚òÖ' : '‚òÜ'}
                </button>
            </div>
        </div>
        
        <div class="settlement-content">
            <div class="settlement-header">
                <h3 class="settlement-name">${settlement.name}</h3>
                <span class="settlement-race-badge race-${settlement.race}">
                    ${getRaceIcon(settlement.race)} ${getRaceName(settlement.race)}
                </span>
            </div>
            
            <div class="settlement-leader">
                <span class="leader-label">
                    <img src="assets/images/icons/icon_leader.gif" class="resized-image3"> –õ–ò–î–ï–†:
                </span>
                <span class="leader-name">${settlement.leader}</span>
            </div>
            
            <div class="settlement-location">
                <span class="location-icon">
                    <img src="assets/images/icons/index_icon_settlements.gif" class="resized-image3">
                </span>
                <span class="location-text">${settlement.location}</span>
            </div>
            
            <div class="settlement-description">
                <p>${settlement.description}</p>
            </div>
            
            <div class="settlement-features">
                <h4>
                    <img src="assets/images/icons/icon_peculiarities.gif" class="resized-image3"> 
                    –û–°–û–ë–ï–ù–ù–û–°–¢–ò
                </h4>
                <div class="features-list">
                    ${settlement.features.map(feature => 
                        `<span class="feature-tag">${feature}</span>`
                    ).join('')}
                </div>
            </div>
            
            <div class="settlement-coordinates">
                <span class="coordinates-label">üìå –ö–û–û–†–î–ò–ù–ê–¢–´:</span>
                <code class="coordinates-value">${settlement.coordinates.x} ${settlement.coordinates.y} ${settlement.coordinates.z}</code>
                <button class="copy-coords-btn" onclick="copyCoordinates(${settlement.coordinates.x}, ${settlement.coordinates.y}, ${settlement.coordinates.z})">
                    üìã
                </button>
            </div>
            
            <div class="settlement-residents">
                <div class="residents-header">
                    <span class="residents-label">
                        <img src="assets/images/icons/index_icon_players.gif" class="resized-image2"> 
                        –ñ–ò–¢–ï–õ–ò (${settlement.residents.length}):
                    </span>
                </div>
                <div class="residents-list">
                    ${settlement.residents.map(resident => 
                        `<span class="resident-tag">${resident}</span>`
                    ).join('')}
                </div>
            </div>
        </div>
        
        <div class="settlement-footer">
            <span class="established-date">–û—Å–Ω–æ–≤–∞–Ω–æ ${formatDate(settlement.established)}</span>
            <div class="settlement-actions">
                <button class="action-btn visit-btn" onclick="visitSettlement(${settlement.id})">
                    üéÆ –ü–æ—Å–µ—Ç–∏—Ç—å
                </button>
                <button class="action-btn details-btn" onclick="showSettlementDetails(${settlement.id})">
                    üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        card.style.animation = 'fadeInUp 0.6s ease-out';
    }, 100);

    return card;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–µ–ª–µ–Ω–∏–π
function filterSettlements() {
    const settlements = document.querySelectorAll('.settlement-card');
    let visibleCount = 0;

    settlements.forEach(card => {
        const race = card.getAttribute('data-race');
        const name = card.querySelector('.settlement-name').textContent.toLowerCase();
        const description = card.querySelector('.settlement-description p').textContent.toLowerCase();
        
        const matchesFilter = currentFilter === 'all' || race === currentFilter;
        const matchesSearch = currentSearch === '' || 
                            name.includes(currentSearch) || 
                            description.includes(currentSearch);
        
        if (matchesFilter && matchesSearch) {
            card.style.display = 'block';
            card.classList.add('visible');
            visibleCount++;
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, 100);
        } else {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            setTimeout(() => {
                card.style.display = 'none';
                card.classList.remove('visible');
            }, 300);
        }
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    showNoResultsMessage(visibleCount === 0);
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showNoResultsMessage(show) {
    let message = document.getElementById('noResultsMessage');
    
    if (show && !message) {
        message = document.createElement('div');
        message.id = 'noResultsMessage';
        message.className = 'no-results-message';
        message.innerHTML = `
            <div class="no-results-content">
                <div class="no-results-icon">üè∞</div>
                <h3>–ü–æ—Å–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
                <button onclick="clearFilters()" class="clear-filters-btn">
                    üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                </button>
            </div>
        `;
        
        const grid = document.getElementById('settlementsGrid');
        grid.appendChild(message);
    } else if (!show && message) {
        message.remove();
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function clearFilters() {
    currentSearch = '';
    currentFilter = 'all';
    
    const searchInput = document.getElementById('settlementsSearch');
    if (searchInput) searchInput.value = '';
    
    const filterButtons = document.querySelectorAll('.settlement-filter-btn');
    filterButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-filter') === 'all') {
            btn.classList.add('active');
        }
    });
    
    filterSettlements();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞
function initWorldMap() {
    // console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞...');
    
    const mapPoints = document.querySelectorAll('.map-point');
    mapPoints.forEach(point => {
        point.addEventListener('mouseenter', function() {
            const settlementName = this.getAttribute('data-settlement');
            highlightSettlementOnMap(settlementName);
        });
        
        point.addEventListener('mouseleave', function() {
            clearMapHighlights();
        });
        
        point.addEventListener('click', function() {
            const settlementName = this.getAttribute('data-settlement');
            focusOnSettlement(settlementName);
        });
    });
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ—Å–µ–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
function highlightSettlementOnMap(settlementName) {
    const settlement = settlementsData.settlements.find(s => s.name === settlementName);
    if (!settlement) return;
    
    const cards = document.querySelectorAll('.settlement-card');
    cards.forEach(card => {
        if (card.querySelector('.settlement-name').textContent === settlementName) {
            card.classList.add('highlighted');
        }
    });
}

// –°–Ω—è—Ç–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
function clearMapHighlights() {
    const cards = document.querySelectorAll('.settlement-card');
    cards.forEach(card => card.classList.remove('highlighted'));
}

// –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ –ø–æ—Å–µ–ª–µ–Ω–∏–∏
function focusOnSettlement(settlementName) {
    const settlement = settlementsData.settlements.find(s => s.name === settlementName);
    if (!settlement) return;
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
    const card = document.querySelector(`[data-settlement-id="${settlement.id}"]`);
    if (card) {
        card.scrollIntoView({ behavior: 'smooth', block: 'center' });
        card.classList.add('pulse-highlight');
        setTimeout(() => card.classList.remove('pulse-highlight'), 2000);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
function showSettlementOnMap(settlementName) {
    const settlement = settlementsData.settlements.find(s => s.name === settlementName);
    if (!settlement) return;
    
    const mapPoint = document.querySelector(`[data-settlement="${settlementName}"]`);
    if (mapPoint) {
        mapPoint.classList.add('pulse');
        setTimeout(() => mapPoint.classList.remove('pulse'), 1000);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatistics() {
    const stats = settlementsData.stats;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.querySelectorAll('.stat-number').forEach(stat => {
        const target = stat.getAttribute('data-target');
        if (target === '1') {
            animateCounter(stat, stats.total_settlements);
        } else if (target === '8') {
            animateCounter(stat, stats.total_residents);
        }
    });
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
function animateCounter(element, target) {
    let current = 0;
    const increment = target / 50;
    const timer = setInterval(() => {
        current += increment;
        if (current >= target) {
            current = target;
            clearInterval(timer);
        }
        element.textContent = Math.floor(current);
    }, 30);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getWarStatusInfo(status) {
    const statuses = {
        'peace': { text: '–ú–∏—Ä', class: 'peace', icon: 'üïäÔ∏è' },
        'defensive': { text: '–í –±–æ–µ–≤–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏', class: 'defensive', icon: 'üèπ' },
        'aggressive': { text: '–ê—Ç–∞–∫–∞', class: 'aggressive', icon: '‚öîÔ∏è' },
        'neutral': { text: '–ù–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç', class: 'neutral', icon: '‚öñÔ∏è' }
    };
    return statuses[status] || statuses['neutral'];
}

function getRaceIcon(race) {
    const icons = {
        'hell': 'üî•',
        'heaven': 'üëº',
        'earth': 'üåç'
    };
    return icons[race] || 'üè∞';
}

function getRaceName(race) {
    const names = {
        'hell': '–î–µ–º–æ–Ω—ã',
        'heaven': '–ê–Ω–≥–µ–ª—ã',
        'earth': '–ó–µ–º–Ω—ã–µ'
    };
    return names[race] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

// –§—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
function toggleFavorite(settlementId, button) {
    const index = favoriteSettlements.indexOf(settlementId);
    
    if (index === -1) {
        favoriteSettlements.push(settlementId);
        button.classList.add('favorited');
        button.innerHTML = '‚òÖ';
        showNotification('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'success');
    } else {
        favoriteSettlements.splice(index, 1);
        button.classList.remove('favorited');
        button.innerHTML = '‚òÜ';
        showNotification('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', 'info');
    }
    
    localStorage.setItem('favoriteSettlements', JSON.stringify(favoriteSettlements));
}

function copyCoordinates(x, y, z) {
    const coords = `${x} ${y} ${z}`;
    navigator.clipboard.writeText(coords).then(() => {
        showNotification('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
    }).catch(() => {
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    });
}

function visitSettlement(settlementId) {
    const settlement = settlementsData.settlements.find(s => s.id === settlementId);
    if (settlement) {
        showNotification(`–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ ${settlement.name}...`, 'info');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    }
}

function showSettlementDetails(settlementId) {
    const settlement = settlementsData.settlements.find(s => s.id === settlementId);
    if (settlement) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        createDetailsModal(settlement);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
function createDetailsModal(settlement) {
    const modal = document.createElement('div');
    modal.className = 'settlement-modal';
    modal.innerHTML = `
        <div class="modal-content ${settlement.race}-theme">
            <div class="modal-header">
                <h2>${settlement.name}</h2>
                <button class="modal-close" onclick="closeModal()">√ó</button>
            </div>
            <div class="modal-body">
                <div class="modal-image">
                    <img src="${settlement.image}" alt="${settlement.name}"
                         onerror="this.src='assets/images/settlements/default_settlement.png'">
                </div>
                <div class="modal-info">
                    <div class="info-grid">
                        <div class="info-item">
                            <label>üëë –õ–∏–¥–µ—Ä:</label>
                            <span>${settlement.leader}</span>
                        </div>
                        <div class="info-item">
                            <label>üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ:</label>
                            <span>${settlement.population} –∂–∏—Ç–µ–ª–µ–π</span>
                        </div>
                        <div class="info-item">
                            <label>‚≠ê –£—Ä–æ–≤–µ–Ω—å:</label>
                            <span>${settlement.level}/5</span>
                        </div>
                        <div class="info-item">
                            <label>üìÖ –û—Å–Ω–æ–≤–∞–Ω–æ:</label>
                            <span>${formatDate(settlement.established)}</span>
                        </div>
                        <div class="info-item">
                            <label>üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</label>
                            <span>${settlement.location}</span>
                        </div>
                    </div>
                    
                    <div class="residents-section">
                        <h4>üè† –ñ–∏—Ç–µ–ª–∏ –ø–æ—Å–µ–ª–µ–Ω–∏—è:</h4>
                        <div class="residents-grid">
                            ${settlement.residents.map(resident => 
                                `<span class="resident-badge">${resident}</span>`
                            ).join('')}
                        </div>
                    </div>
                    
                    <div class="coordinates-section">
                        <h4>üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</h4>
                        <code class="coordinates-display">${settlement.coordinates.x} ${settlement.coordinates.y} ${settlement.coordinates.z}</code>
                        <button onclick="copyCoordinates(${settlement.coordinates.x}, ${settlement.coordinates.y}, ${settlement.coordinates.z})" 
                                class="copy-btn">
                            üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button onclick="visitSettlement(${settlement.id})" class="visit-btn-large">
                    üéÆ –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </button>
                <button onclick="closeModal()" class="close-btn">
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeModal();
        }
    });
}

function closeModal() {
    const modal = document.querySelector('.settlement-modal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let container = document.querySelector('.notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.className = 'notifications-container';
        document.body.appendChild(container);
    }
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
    `;
    
    container.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.add('show');
    }, 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        if (notification.parentNode) {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }
    }, 3000);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.toggleFavorite = toggleFavorite;
window.copyCoordinates = copyCoordinates;
window.visitSettlement = visitSettlement;
window.showSettlementDetails = showSettlementDetails;
window.closeModal = closeModal;
window.clearFilters = clearFilters;
