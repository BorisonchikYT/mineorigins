// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞ Minecraft
document.addEventListener('DOMContentLoaded', function() {
    initAnimations();
    initServerStats();
    initOnlineStats();
    initRaceCards();
    initCursorEffect();
    initScrollAnimations();
    initTypewriterEffect();
    initRealTimeStats();
});

// –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function initRealTimeStats() {
    const serverIP = 'f27.joinserver.xyz:25835'; // –û—Å–Ω–æ–≤–Ω–æ–π IP
    const numericIP = '95.216.92.76:25835'; // –¶–∏—Ñ—Ä–æ–≤–æ–π IP
    const version = '1.21.1 Fabric';

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        updateServerStatus('loading', '–ó–∞–≥—Ä—É–∑–∫–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API)
        const serverData = await fetchServerData(serverIP);
        
        if (serverData.online) {
            updateServerStatus('online', '–û–ù–õ–ê–ô–ù');
            updatePlayerCount(serverData.players.online);
            updateOnlinePlayers(serverData.players.list || []);
            updateServerChart(serverData);
        } else {
            updateServerStatus('offline', '–û–§–§–õ–ê–ô–ù');
            updatePlayerCount(0);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        updateServerInfo(serverIP, numericIP, version);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        updateServerStatus('error', '–û–®–ò–ë–ö–ê');
    }
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
async function fetchServerData(ip) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API Minecraft —Å–µ—Ä–≤–µ—Ä–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è https://api.mcsrvstat.us/ –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±—ç–∫–µ–Ω–¥
    
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve({
                online: true,
                players: {
                    online: Math.floor(Math.random() * 50) + 100, // 100-150 –∏–≥—Ä–æ–∫–æ–≤
                    max: 200,
                    list: generateRandomPlayers(12) // 12 —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
                },
                version: '1.21.1',
                motd: 'Minecraft Origins - –ú–∏—Ä —Ç—Ä–µ—Ö —Ä–∞—Å'
            });
        }, 1000);
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
function generateRandomPlayers(count) {
    const names = [
        'NetherLord', 'SkyGuardian', 'EarthBuilder', 'LavaWalker', 
        'CloudArchitect', 'ForestKeeper', 'StoneMason', 'IronForger',
        'DiamondMiner', 'RedstoneEngineer', 'EnderWalker', 'NetherExplorer',
        'HeavenBuilder', 'HellWarrior', 'EarthShaman', 'WaterMage'
    ];
    
    const races = ['hell', 'heaven', 'earth'];
    const avatars = {
        hell: ['üî•', 'üåã', 'üëπ', 'üíÄ'],
        heaven: ['üëº', '‚ú®', 'üå§Ô∏è', 'üïäÔ∏è'],
        earth: ['üåç', 'üå≥', '‚õ∞Ô∏è', 'üåø']
    };
    
    return Array.from({ length: count }, (_, i) => {
        const race = races[Math.floor(Math.random() * races.length)];
        return {
            name: names[i] || `Player${i + 1}`,
            race: race,
            avatar: avatars[race][Math.floor(Math.random() * avatars[race].length)]
        };
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
function updateServerStatus(status, text) {
    const statusIndicator = document.querySelector('.status-indicator');
    const statusText = document.querySelector('.status-text');
    
    if (statusIndicator && statusText) {
        statusIndicator.className = 'status-indicator ' + status;
        statusText.textContent = text;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
function updatePlayerCount(count) {
    const playerCount = document.querySelector('.player-count');
    const statNumbers = document.querySelectorAll('.stat-number[data-target]');
    
    if (playerCount) {
        playerCount.textContent = count;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        playerCount.style.transform = 'scale(1.2)';
        setTimeout(() => playerCount.style.transform = 'scale(1)', 300);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
    statNumbers.forEach(stat => {
        const target = parseInt(stat.getAttribute('data-target'));
        if (target > 0) {
            animateCounter(stat, count);
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
function updateOnlinePlayers(players) {
    const onlineList = document.getElementById('onlineList');
    if (!onlineList) return;

    onlineList.innerHTML = '';
    
    players.forEach(player => {
        const playerElement = document.createElement('div');
        playerElement.className = 'online-player';
        playerElement.innerHTML = `
            <div class="player-avatar ${player.race}">${player.avatar}</div>
            <div class="player-info">
                <div class="player-name">${player.name}</div>
                <div class="player-race">${getRaceName(player.race)} —Ä–∞—Å–∞</div>
            </div>
        `;
        onlineList.appendChild(playerElement);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
function updateServerInfo(ip, numericIP, version) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ IP –∏ –≤–µ—Ä—Å–∏–∏ –≥–¥–µ-–Ω–∏–±—É–¥—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    console.log('–°–µ—Ä–≤–µ—Ä:', ip, numericIP, version);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
function updateServerChart(serverData) {
    const chartContainer = document.querySelector('.online-chart');
    if (!chartContainer) return;

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    chartContainer.innerHTML = `
        <div class="chart-real-time">
            <div class="chart-header">
                <h4>üìä –û–Ω–ª–∞–π–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</h4>
                <div class="current-online">–°–µ–π—á–∞—Å: ${serverData.players.online} –∏–≥—Ä–æ–∫–æ–≤</div>
            </div>
            <div class="chart-bars-real">
                ${generateChartBars(serverData.players.online)}
            </div>
            <div class="chart-labels">
                <span>00:00</span>
                <span>06:00</span>
                <span>12:00</span>
                <span>18:00</span>
                <span>23:59</span>
            </div>
        </div>
    `;

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    setTimeout(() => {
        const bars = chartContainer.querySelectorAll('.chart-bar');
        bars.forEach((bar, index) => {
            setTimeout(() => {
                bar.style.opacity = '1';
                bar.style.transform = 'scaleY(1)';
            }, index * 50);
        });
    }, 500);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∞
function generateChartBars(currentOnline) {
    let bars = '';
    const baseHeight = currentOnline;
    
    for (let i = 0; i < 24; i++) {
        // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–≥–æ –æ–Ω–ª–∞–π–Ω–∞
        const height = Math.max(50, Math.min(100, 
            (baseHeight * (0.7 + Math.random() * 0.6)) / 2
        ));
        
        bars += `<div class="chart-bar" style="height: ${height}%"></div>`;
    }
    
    return bars;
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
function animateCounter(element, target) {
    const duration = 2000;
    const start = 0;
    const startTime = performance.now();
    
    function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // easing function
        const easeOut = 1 - Math.pow(1 - progress, 3);
        const current = Math.floor(start + (target - start) * easeOut);
        
        element.textContent = current;
        
        if (progress < 1) {
            requestAnimationFrame(updateCounter);
        }
    }
    
    requestAnimationFrame(updateCounter);
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
function initAnimations() {
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('active');
            }
        });
    }, { threshold: 0.1 });

    document.querySelectorAll('.reveal').forEach(el => {
        observer.observe(el);
    });
}

function initServerStats() {
    // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
}

function initOnlineStats() {
    // –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ initRealTimeStats
}

function initRaceCards() {
    const raceCards = document.querySelectorAll('.race-card');
    
    raceCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            const race = this.getAttribute('data-race');
            playRaceSound(race);
        });

        card.addEventListener('click', function() {
            const race = this.getAttribute('data-race');
            showRaceModal(race);
        });
    });
}

function playRaceSound(race) {
    const sounds = {
        hell: () => {
            const audio = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAAAAA==');
            audio.volume = 0.3;
            audio.play().catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–ø–ª–µ—è
        },
        heaven: () => {
            // –ó–≤—É–∫ —Ä–∞–π—Å–∫–æ–π —Ä–∞—Å—ã
        },
        earth: () => {
            // –ó–≤—É–∫ –∑–µ–º–Ω–æ–π —Ä–∞—Å—ã
        }
    };
    
    if (sounds[race]) {
        sounds[race]();
    }
}

    const data = raceData[race];
    if (!data) return;

    const modal = document.createElement('div');
    modal.className = 'race-modal';
    modal.style.borderColor = data.color;
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>${data.title}</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p>${data.description}</p>
                <div class="abilities-list">
                    ${data.abilities.map(ability => `<span class="ability">${ability}</span>`).join('')}
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    setTimeout(() => modal.classList.add('active'), 10);

    modal.querySelector('.modal-close').addEventListener('click', () => {
        modal.classList.remove('active');
        setTimeout(() => modal.remove(), 300);
    });

    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.remove('active');
            setTimeout(() => modal.remove(), 300);
        }
    });

function initCursorEffect() {
    const cursor = document.querySelector('.minecraft-cursor');
    if (!cursor) return;

    document.addEventListener('mousemove', (e) => {
        cursor.style.left = e.clientX + 'px';
        cursor.style.top = e.clientY + 'px';
    });

    const interactiveElements = document.querySelectorAll('a, button, .race-card, .nav-item');
    interactiveElements.forEach(el => {
        el.addEventListener('mouseenter', () => {
            cursor.style.transform = 'scale(1.5)';
            cursor.style.background = 'url("data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><rect x=\"2\" y=\"2\" width=\"16\" height=\"16\" fill=\"none\" stroke=\"%23ffd700\" stroke-width=\"2\"/><rect x=\"6\" y=\"6\" width=\"8\" height=\"8\" fill=\"%23ffd700\" opacity=\"0.8\"/></svg>")';
        });

        el.addEventListener('mouseleave', () => {
            cursor.style.transform = 'scale(1)';
            cursor.style.background = 'url("data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><rect x=\"2\" y=\"2\" width=\"16\" height=\"16\" fill=\"none\" stroke=\"%23ffffff\" stroke-width=\"2\"/><rect x=\"6\" y=\"6\" width=\"8\" height=\"8\" fill=\"%23ffffff\" opacity=\"0.5\"/></svg>")';
        });
    });
}

function initScrollAnimations() {
    let lastScrollY = window.scrollY;
    const nav = document.querySelector('.main-nav');

    window.addEventListener('scroll', () => {
        if (window.scrollY > lastScrollY && window.scrollY > 100) {
            nav.style.transform = 'translateY(-100%)';
        } else {
            nav.style.transform = 'translateY(0)';
        }
        lastScrollY = window.scrollY;

        const scrolled = window.pageYOffset;
        const parallaxElements = document.querySelectorAll('.floating-island');
        parallaxElements.forEach(el => {
            const speed = el.getAttribute('data-speed') || 1;
            el.style.transform = `translateY(${scrolled * speed * 0.1}px)`;
        });
    });
}

function initTypewriterEffect() {
    const description = document.querySelector('.server-description p');
    if (!description) return;

    const text = description.textContent;
    description.textContent = '';
    description.classList.add('typing-effect');

    let i = 0;
    const timer = setInterval(() => {
        if (i < text.length) {
            description.textContent += text.charAt(i);
            i++;
        } else {
            clearInterval(timer);
            description.classList.remove('typing-effect');
        }
    }, 50);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function getRaceName(race) {
    const races = {
        hell: '–î–µ–º–æ–Ω—ã',
        heaven: '–ê–Ω–≥–µ–ª—ã',
        earth: '–ó–µ–º–Ω—ã–µ'
    };
    return races[race] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
setInterval(() => {
    initRealTimeStats();
}, 30000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
