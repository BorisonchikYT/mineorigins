// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞ Minecraft
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéÆ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤');
    
    initAnimations();
    initServerStats();
    initOnlineStats();
    initRaceCards();
    initCursorEffect();
    initScrollAnimations();
    initTypewriterEffect();
    initRealTimeStats();
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const SERVER_CONFIG = {
    primaryIP: 'f27.joinserver.xyz:25835',
    numericIP: '95.216.92.76:25835',
    version: '1.21.1 Fabric',
    apiEndpoints: {
        status: 'https://api.mcsrvstat.us/3/95.216.92.76:25835',
        ping: 'https://api.mcsrvstat.us/debug/ping/95.216.92.76:25835',
        backup: 'https://api.mcsrvstat.us/2/95.216.92.76:25835',
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API
        alternative1: 'https://api.mcstatus.io/v2/status/java/95.216.92.76:25835',
        alternative2: 'https://api.minetools.eu/ping/95.216.92.76/25835'
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–æ–≤
class PlayersDataManager {
    constructor() {
        this.playersData = null;
        this.loaded = false;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ players.json
    async loadPlayersData() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...');
            const response = await fetch('assets/json/players.json');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.players.length, '–∏–≥—Ä–æ–∫–æ–≤');
            
            this.playersData = data.players;
            this.loaded = true;
            
            return this.playersData;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
            this.playersData = this.getDemoPlayersData();
            this.loaded = true;
            return this.playersData;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ –ø–æ –∏–º–µ–Ω–∏
    getPlayerInfo(playerName) {
        if (!this.playersData || !this.loaded) {
            return null;
        }

        const player = this.playersData.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase()
        );

        return player || null;
    }

    // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ (fallback)
    getDemoPlayersData() {
        return [
            {
                "id": 1,
                "name": "_Kot_Baris_",
                "avatar": "assets/images/icons/kotbaris.png",
                "race": "earth",
                "description": "‚óà –ó–µ–º–Ω–æ–π\n–ö–æ—Ç–æ-—á–µ–ª–æ–≤–µ–∫, —è –ª–∏–¥–µ—Ä –∑–µ–º–Ω–æ–π —Ä–∞—Å—ã, —Å–æ–∑–¥–∞—Ç–µ–ª—å –§—Ä–∏–∫–ë—É—Ä–≥—Å–∫–æ–π –ò–º–ø–µ—Ä–∏–∏, —Ö–æ—á–µ—Ç –Ω–∞–ª–∞–¥–∏—Ç—å –º–∏—Ä –º–µ–∂–¥—É —Ä–∞—Å–∞–º–∏.",
                "joinDate": "2025-10-11",
                "socials": {
                    "discord": "borisonchik_yt",
                    "telegram": "@BorisonchikOfficial"
                }
            },
            {
                "id": 2,
                "name": "stalker_hunter_",
                "avatar": "assets/images/icons/stalker.png",
                "race": "hell",
                "description": "‚óà –î–µ–º–æ–Ω\n–ü–∞–¥—à–∏–π –ê–Ω–≥–µ–ª ‚Äî –ª–∏–¥–µ—Ä –∞–¥—Å–∫–æ–π —Ä–∞—Å—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –æ—Ç–∫—Ä—ã—Ç–∏—è. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç –º–µ–∂–¥—É –§—Ä–∏–∫–ë—É—Ä–≥–æ–º –∏ –í–î–ù–•, –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –≤ –∞–¥—É –∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.",
                "joinDate": "2025-10-11",
                "socials": {
                    "discord": "stalker_hunter_",
                    "telegram": "@Stalker_Hunter_s"
                }
            },
            {
                "id": 3,
                "name": "amidamaru3434",
                "avatar": "assets/images/icons/ERROR.png",
                "race": "heaven",
                "description": "‚óà –ê–Ω–≥–µ–ª\n–°–µ—Ä–∞—Ñ–∏–º ‚Äî –ª–∏–¥–µ—Ä —Ä–∞–π—Å–∫–æ–π —Ä–∞—Å—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –æ—Ç–∫—Ä—ã—Ç–∏—è.",
                "joinDate": "2025-10-14",
                "socials": {
                    "discord": "bruhhhhsasa21",
                    "telegram": "@aza_matsuto"
                }
            },
            {
                "id": 4,
                "name": "darcklord",
                "avatar": "assets/images/icons/darcklord.png",
                "race": "earth",
                "description": "–î–≤–æ—Ä—Ñ ‚Äî –±—ã–≤—à–∏–π –≤–æ–∏–Ω –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ –∂–∏—Ç—å –Ω–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∑–æ–≤—É—Ç –µ–≥–æ\n–ñ–∏–≤–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ –§—Ä–∏–∫–±—É—Ä–≥  –∏ —Ö–æ—á–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç—å –∑–æ–ª–æ—Ç—ã—Ö —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ª—É—á—à—É—é —Ö–∞—Ä—á–µ–≤–Ω—é –≥–¥–µ –ª—é–¥–∏ –∏ –Ω–µ–ª—é–¥–∏ —Å–º–æ–≥–ª–∏ –±—ã –¥–∞–≤–∞—Ç—å –∏ –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞—Ç—å –∏ —Å–Ω–∏–º–∞—Ç—å –∂–∏–ª—å–µ –∞ —Ç–∞–∫ –∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–π–¥–∞—Ö –Ω–∞ –∑–∞–º–∫–∏ –∏ –±—ã—Ç—å –Ω–∞–µ–º–Ω–∏–∫–∞–º–∏,",
                "joinDate": "2025-10-11",
                "socials": {
                    "discord": "bagriannik._33166",
                    "telegram": ""
                }
            },
            {
                "id": 5,
                "name": "ddanilkaaaa",
                "avatar": "assets/images/icons/ERROR.png",
                "race": "earth",
                "description": "",
                "joinDate": "2025-10-13",
                "socials": {
                    "discord": "ddanilkaaaa_83622",
                    "telegram": "@Ddanilkaaaa"
                }
            },
            {
                "id": 6,
                "name": "deace",
                "avatar": "assets/images/icons/deace.png",
                "race": "heaven",
                "description": "–ê–Ω–≥–µ–ª –≥–∏–≥–∞—á–∞–¥, —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–æ—Ä—Ü–∏—Å—Ç–æ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–Ω–≥–µ–ª–æ–≤. –ò—Å—Ç—Ä–µ–±–ª—è–µ—Ç –Ω–µ—á–µ—Å—Ç–µ–π, –¥–µ–º–æ–Ω–æ–≤ –∏ –¥–∞–∂–µ –ª—é–¥–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç)",
                "joinDate": "2025-10-25",
                "socials": {
                    "discord": "winchikvpotoke_36739",
                    "telegram": "@Zkrtssikit"
                }
            },
            {
                "id": 7,
                "name": "hyutjnh",
                "avatar": "assets/images/icons/ERROR.png",
                "race": "heaven",
                "description": "–ê–Ω–≥–µ–ª - —É—á–∞—Å—Ç–Ω–∏–∫ –∞–Ω–≥–µ–ª—å—Å–∫–æ–π —Ä–∞—Å—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –æ—Ç–∫—Ä—ã—Ç–∏—è(—è –µ—â—ë —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –±–ª–µ–∫ –∞–ª—å—Ñ—ã). –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç –º–µ–∂–¥—É –§—Ä–∏–∫–ë—É—Ä–≥–æ–º, –õ–• –∏ –í–î–ù–•, –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ª–∞–º–ø–æ–≤—ã–π, –ª—é–±–ª—é –ª–∏—Å.",
                "joinDate": "2025-10-18",
                "socials": {
                    "discord": "last_troid_0079",
                    "telegram": "@ED4MKM_AERO"
                }
            },
            {
                "id": 8,
                "name": "jdh16",
                "avatar": "assets/images/icons/ERROR.png",
                "race": "earth",
                "description": "",
                "joinDate": "2025-10-22",
                "socials": {
                    "discord": "frozen_flames1703",
                    "telegram": "@Frozen2474"
                }
            },
            {
                "id": 9,
                "name": "maxxaumka",
                "avatar": "assets/images/icons/maksimka.png",
                "race": "earth",
                "description": "–í–æ–ª—à–µ–±–Ω–∏–∫ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–Ω –Ω–µ–π—Ç—Ä–∞–ª–µ–Ω –∫–æ –≤—Å–µ–º —Ä–∞—Å–∞–º –∏ –∫–ª–∞–Ω–∞–º –∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ. –ñ–∏–≤—ë—Ç –≤ –∫—É–±–µ –≤–º–µ—Å—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º snekky_off, —Å –∫–æ—Ç–æ—Ä—ã–º –∏–∑—É—á–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∏ –º–∞—à–∏–Ω—ã.",
                "joinDate": "2025-10-13",
                "socials": {
                    "discord": "maxxaumka6679",
                    "telegram": "@KOT_B_palbto"
                }
            },
            {
                "id": 10,
                "name": "nicotine",
                "avatar": "assets/images/icons/ERROR.png",
                "race": "earth",
                "description": "",
                "joinDate": "2025-10-12",
                "socials": {
                    "discord": "maximus7915",
                    "telegram": "@Maxim_beb"
                }
            },
            {
                "id": 11,
                "name": "pandamom",
                "avatar": "assets/images/icons/pandamom.png",
                "race": "earth",
                "description": "–ö–æ—Ç–æ-—á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é —Ö–∑ –∫–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é –º–∏—Ä–Ω–æ—Å—Ç—å –≤ –§—Ä–∏–∫–ë—É—Ä–≥–µ –±–µ–≥–∞—é",
                "joinDate": "2025-10-11",
                "socials": {
                    "discord": "pisde4",
                    "telegram": "@Heyheyhey223"
                }
            },
            {
                "id": 12,
                "name": "snekky_offc",
                "avatar": "assets/images/icons/snekky.png",
                "race": "heaven",
                "description": "–ò–∑-–∑–∞ —Å–∫—É—á–Ω–æ–≥–æ –º–∏—Ä–∞ –∞–Ω–≥–µ–ª–æ–≤, —è —Ä–µ—à–∏–ª –ø–æ–∫–∏–Ω—É—Ç—å –Ω–µ–±–µ—Å–∞. –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è —è –±—Ä–æ–¥–∏–ª –ø–æ –º–∏—Ä—É, –≥–¥–µ –∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª –∑–µ–º–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∫–∞ –ú–∞–∫—Å–∞—É–º–∫–∞. –ï–≥–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª –º–∏—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ü–æ—Å–ª–µ –¥–æ–ª–≥–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞ –±–∞–∑–µ - –û–∫–µ–∞–Ω–∏—á–µ—Å–∫–∞—è –ß–µ—Ä–µ–ø–∞—Ö –æ–Ω —Å–º–æ–≥ —Å—Ç–∞—Ç—å –ö–∏–±–µ—Ä-–ê–Ω–≥–µ–ª–æ–º",
                "joinDate": "2025-10-11",
                "socials": {
                    "discord": "linar9341",
                    "telegram": "@FV_4_0_0_5"
                }
            },
            {
                "id": 13,
                "name": "Yaryna",
                "avatar": "assets/images/icons/ERROR.png",
                "race": "hell",
                "description": "–î–µ–º–æ–Ω–∏—Ü–∞ ‚Äî –∂–∏—Ç–µ–ª—å –õ–æ–≥–æ–≤–∞ –•–∞–Ω—Ç–µ—Ä–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è —É—á–∞—Å—Ç–Ω–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                "joinDate": "",
                "socials": {
                    "discord": "prus404",
                    "telegram": "@Prus404"
                }
            },
            {
                "id": 14,
                "name": "Lemonchik",
                "avatar": "assets/images/icons/ERROR.png",
                "race": "hell",
                "description": "",
                "joinDate": "",
                "socials": {
                    "discord": "yt_lymonchuk",
                    "telegram": "@Motosport_52"
                }
            },
            {
                "id": 15,
                "name": "tropic_yt2021",
                "avatar": "assets/images/icons/ERROR.png",
                "race": "earth",
                "description": "",
                "joinDate": "",
                "socials": {
                    "discord": "trop1c_.",
                    "telegram": "@tropic_mc"
                }
            },
            {
                "id": 16,
                "name": "Ayaz_ak",
                "avatar": "assets/images/icons/ERROR.png",
                "race": "earth",
                "description": "",
                "joinDate": "",
                "socials": {
                    "discord": "a.l.t.y.n",
                    "telegram": "@Ayaz_ak"
                }
            },
            {
                "id": 17,
                "name": "Cartoshka_",
                "avatar": "assets/images/icons/cartoskha_.png",
                "race": "hell",
                "description": "",
                "joinDate": "2025-10-28",
                "socials": {
                    "discord": ".cartoshka_",
                    "telegram": ""
                }
            }
        ];
    }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
class MinecraftServerAPI {
    constructor() {
        this.currentData = null;
        this.lastUpdate = null;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    async getServerStatus() {
        try {
            console.log('üîÑ –ó–∞–ø—Ä–æ—Å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API...');
            const response = await fetch(SERVER_CONFIG.apiEndpoints.status, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'User-Agent': 'MinecraftServerStatus/1.0'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã:', data);

            return this.processServerData(data);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API:', error);
            return await this.tryBackupAPIs();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
    processServerData(data) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        let playersList = [];
        let hasRealPlayerData = false;
        
        if (data.players && data.players.list) {
            playersList = data.players.list.map(player => {
                if (typeof player === 'string') {
                    return player;
                } else if (player && player.name) {
                    return player.name;
                }
                return null;
            }).filter(name => name !== null);
            hasRealPlayerData = playersList.length > 0;
        } else if (data.players && data.players.uuid) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å UUID, –Ω–æ –Ω–µ—Ç –∏–º–µ–Ω
            playersList = Object.keys(data.players.uuid);
            hasRealPlayerData = playersList.length > 0;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ MOTD
        let motdText = 'Minecraft Origins Server';
        if (data.motd) {
            if (data.motd.clean && Array.isArray(data.motd.clean)) {
                motdText = data.motd.clean.join(' ');
            } else if (typeof data.motd === 'string') {
                motdText = data.motd;
            }
        }

        return {
            online: data.online || false,
            players: {
                online: data.players?.online || 0,
                max: data.players?.max || 0,
                list: playersList
            },
            version: data.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            motd: motdText,
            hostname: data.hostname || SERVER_CONFIG.primaryIP,
            port: data.port || 25835,
            icon: data.icon || null,
            software: data.software || 'Vanilla',
            hasRealPlayerData: hasRealPlayerData
        };
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å backup API
    async tryBackupAPIs() {
        const backupAPIs = [
            SERVER_CONFIG.apiEndpoints.backup,
            SERVER_CONFIG.apiEndpoints.alternative1,
            SERVER_CONFIG.apiEndpoints.alternative2
        ];

        for (const apiUrl of backupAPIs) {
            try {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ backup API: ${apiUrl}`);
                const response = await fetch(apiUrl);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log(`‚úÖ Backup API —Å—Ä–∞–±–æ—Ç–∞–ª: ${apiUrl}`);
                    return this.processBackupData(data, apiUrl);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è Backup API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${apiUrl}`, error);
                continue;
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        throw new Error('–í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup API
    processBackupData(data, apiUrl) {
        let playersList = [];
        let hasRealPlayerData = false;

        if (apiUrl.includes('mcstatus.io')) {
            // –§–æ—Ä–º–∞—Ç mcstatus.io
            playersList = data.players?.list?.map(p => p.name_clean) || [];
            hasRealPlayerData = playersList.length > 0;
            
            return {
                online: data.online || false,
                players: {
                    online: data.players?.online || 0,
                    max: data.players?.max || 0,
                    list: playersList
                },
                version: data.version?.name_clean || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                motd: data.motd?.clean || 'Minecraft Origins Server',
                hasRealPlayerData: hasRealPlayerData
            };
        } else if (apiUrl.includes('minetools.eu')) {
            // –§–æ—Ä–º–∞—Ç minetools.eu
            playersList = data.players?.sample?.map(p => p.name) || [];
            hasRealPlayerData = playersList.length > 0;
            
            return {
                online: data.status === 'success',
                players: {
                    online: data.players?.online || 0,
                    max: data.players?.max || 0,
                    list: playersList
                },
                version: data.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                motd: data.description || 'Minecraft Origins Server',
                hasRealPlayerData: hasRealPlayerData
            };
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç mcsrvstat.us
            return this.processServerData(data);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
const serverAPI = new MinecraftServerAPI();
const playersManager = new PlayersDataManager();

// –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function initRealTimeStats() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        updateServerStatus('loading', '–ó–∞–≥—Ä—É–∑–∫–∞...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!playersManager.loaded) {
            await playersManager.loadPlayersData();
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
        const serverData = await serverAPI.getServerStatus();
        
        if (serverData.online) {
            updateServerStatus('online', '–û–ù–õ–ê–ô–ù');
            updatePlayerCount(serverData.players.online);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await updateOnlinePlayers(serverData.players.list, serverData.hasRealPlayerData);
            
            updateServerInfo(serverData);
            updateServerChart(serverData);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            serverAPI.currentData = serverData;
            serverAPI.lastUpdate = Date.now();
            
        } else {
            updateServerStatus('offline', '–û–§–§–õ–ê–ô–ù');
            updatePlayerCount(0);
            updateOnlinePlayers([], false);
            showOfflineMessage();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        updateServerStatus('error', '–û–®–ò–ë–ö–ê');
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
async function updateOnlinePlayers(players, hasRealPlayerData) {
    const onlineList = document.getElementById('onlineList');
    if (!onlineList) return;

    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    onlineList.innerHTML = '';

    if (players && players.length > 0 && hasRealPlayerData) {
        console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ${players.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:`, players);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
        for (const playerName of players.slice(0, 15)) {
            const playerInfo = playersManager.getPlayerInfo(playerName);
            const playerElement = createPlayerElement(playerName, playerInfo);
            onlineList.appendChild(playerElement);
        }

        if (players.length > 15) {
            const moreElement = document.createElement('div');
            moreElement.className = 'online-player more-players';
            moreElement.innerHTML = `
                <div class="player-avatar more">+${players.length - 15}</div>
                <div class="player-info">
                    <div class="player-name">–∏ –¥—Ä—É–≥–∏–µ...</div>
                    <div class="player-race">–≤—Å–µ–≥–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤</div>
                </div>
            `;
            onlineList.appendChild(moreElement);
        }
    } else if (players && players.length > 0 && !hasRealPlayerData) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏, –Ω–æ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
        console.log('üìä –ï—Å—Ç—å –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API');
        onlineList.innerHTML = `
            <div class="no-players">
                <div class="no-players-icon">üë•</div>
                <div class="no-players-text">–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–≥—Ä–∞—é—Ç ${players.length} –∏–≥—Ä–æ–∫–æ–≤</div>
                <div class="no-players-subtext">–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>
            </div>
        `;
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω
        console.log('üìä –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω');
        onlineList.innerHTML = `
            <div class="no-players">
                <div class="no-players-icon">üë•</div>
                <div class="no-players-text">–°–µ–π—á–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</div>
                <div class="no-players-subtext">–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>
            </div>
        `;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
function createPlayerElement(playerName, playerInfo) {
    const playerElement = document.createElement('div');
    playerElement.className = 'online-player';
    
    if (playerInfo) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        const avatarPath = playerInfo.avatar || `https://mc-heads.net/avatar/${playerName}/64`;
        const race = playerInfo.race || determinePlayerRace(playerName);
        
        playerElement.innerHTML = `
            <div class="player-avatar ${race}">
                <img src="${avatarPath}" alt="${playerName}" 
                     onerror="this.src='assets/icons/players/default.png'">
            </div>
            <div class="player-info">
                <div class="player-name">${playerName}</div>
                <div class="player-race">${getRaceName(race)}</div>
            </div>
        `;
    } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const race = determinePlayerRace(playerName);
        const avatarPath = `https://mc-heads.net/avatar/${playerName}/64`;
        
        playerElement.innerHTML = `
            <div class="player-avatar ${race}">
                <img src="${avatarPath}" alt="${playerName}" 
                     onerror="this.src='assets/icons/players/default.png'">
            </div>
            <div class="player-info">
                <div class="player-name">${playerName}</div>
                <div class="player-race">${getRaceName(race)}</div>
            </div>
        `;
    }

    return playerElement;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—ã –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (fallback)
function determinePlayerRace(playerName) {
    const races = ['hell', 'heaven', 'earth'];
    
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
    if (playerName.toLowerCase().includes('nether') || 
        playerName.toLowerCase().includes('fire') ||
        playerName.toLowerCase().includes('demon') ||
        playerName.toLowerCase().includes('hell')) {
        return 'hell';
    } else if (playerName.toLowerCase().includes('sky') ||
               playerName.toLowerCase().includes('angel') ||
               playerName.toLowerCase().includes('wing') ||
               playerName.toLowerCase().includes('heaven')) {
        return 'heaven';
    } else if (playerName.toLowerCase().includes('earth') ||
               playerName.toLowerCase().includes('nature')) {
        return 'earth';
    }
    
    // –°–ª—É—á–∞–π–Ω–∞—è —Ä–∞—Å–∞ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    return races[Math.floor(Math.random() * races.length)];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—ã
function getRaceName(race) {
    const races = {
        hell: '–î–µ–º–æ–Ω',
        heaven: '–ê–Ω–≥–µ–ª',
        earth: '–ó–µ–º–Ω–æ–π'
    };
    return races[race] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
function updateServerStatus(status, text) {
    const statusIndicator = document.querySelector('.status-indicator');
    const statusText = document.querySelector('.status-text');
    
    if (statusIndicator && statusText) {
        statusIndicator.className = 'status-indicator';
        statusIndicator.classList.add(status);
        statusText.textContent = text;

        statusIndicator.style.animation = 'pulse 0.5s ease-in-out';
        setTimeout(() => statusIndicator.style.animation = '', 500);
    }

    const navStatus = document.querySelector('.server-status .status-indicator');
    const navText = document.querySelector('.server-status .status-text');
    if (navStatus && navText) {
        navStatus.className = 'status-indicator ' + status;
        navText.textContent = text;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
function updatePlayerCount(count) {
    const playerCount = document.querySelector('.player-count');
    const statNumbers = document.querySelectorAll('.stat-number[data-target]');
    
    if (playerCount) {
        playerCount.textContent = count;
        playerCount.style.transform = 'scale(1.2)';
        setTimeout(() => playerCount.style.transform = 'scale(1)', 300);
    }
    
    statNumbers.forEach(stat => {
        const target = parseInt(stat.getAttribute('data-target'));
        if (target > 0) {
            animateCounter(stat, count);
        }
    });

    updateOnlineProgress(count);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ –æ–Ω–ª–∞–π–Ω–∞
function updateOnlineProgress(onlineCount) {
    const progressBar = document.querySelector('.online-progress');
    const maxPlayers = 200;
    
    if (progressBar) {
        const percentage = Math.min((onlineCount / maxPlayers) * 100, 100);
        progressBar.style.width = percentage + '%';
        
        if (percentage > 80) {
            progressBar.style.background = 'var(--hell-color)';
        } else if (percentage > 50) {
            progressBar.style.background = 'var(--earth-color)';
        } else {
            progressBar.style.background = 'var(--heaven-color)';
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
function updateServerInfo(serverData) {
    const serverInfoElements = document.querySelectorAll('.server-info, .server-ip, .server-version');
    
    serverInfoElements.forEach(element => {
        if (element.classList.contains('server-ip')) {
            element.textContent = SERVER_CONFIG.primaryIP;
        } else if (element.classList.contains('server-version')) {
            element.textContent = serverData.version;
        } else {
            element.innerHTML = `
                <strong>IP:</strong> ${SERVER_CONFIG.primaryIP}<br>
                <strong>–í–µ—Ä—Å–∏—è:</strong> ${serverData.version}<br>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status-${serverData.online ? 'online' : 'offline'}">${serverData.online ? '–û–ù–õ–ê–ô–ù' : '–û–§–§–õ–ê–ô–ù'}</span>
            `;
        }
    });

    const motdElement = document.querySelector('.server-motd');
    if (motdElement && serverData.motd) {
        motdElement.textContent = serverData.motd;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–Ω–ª–∞–π–Ω–∞
function updateServerChart(serverData) {
    const chartContainer = document.querySelector('.online-chart');
    if (!chartContainer) return;

    const currentOnline = serverData.players.online;
    const maxPlayers = serverData.players.max || 200;

    chartContainer.innerHTML = `
        <div class="chart-real-time">
            <div class="chart-header">
                <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω–∞</h4>
                <div class="current-online">
                    <span class="online-count">${currentOnline}</span>
                    <span class="online-max">/${maxPlayers}</span>
                    <span class="online-text">–∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω</span>
                </div>
            </div>
            <div class="chart-progress">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${(currentOnline / maxPlayers) * 100}%"></div>
                </div>
            </div>
            <div class="chart-history">
                ${generateHistoryBars(currentOnline, maxPlayers)}
            </div>
        </div>
    `;

    setTimeout(() => {
        const bars = chartContainer.querySelectorAll('.history-bar');
        bars.forEach((bar, index) => {
            setTimeout(() => {
                bar.style.opacity = '1';
                bar.style.transform = 'scaleY(1)';
            }, index * 100);
        });
    }, 500);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function generateHistoryBars(currentOnline, maxPlayers) {
    let bars = '';
    const hours = 12;
    
    for (let i = 0; i < hours; i++) {
        const baseOnline = currentOnline * (0.7 + Math.random() * 0.6);
        const height = Math.max(10, Math.min(100, (baseOnline / maxPlayers) * 100));
        
        const time = new Date();
        time.setHours(time.getHours() - (hours - i - 1));
        const timeLabel = time.getHours().toString().padStart(2, '0') + ':00';
        
        bars += `
            <div class="history-bar-container">
                <div class="history-bar" style="height: ${height}%"></div>
                <span class="history-time">${timeLabel}</span>
            </div>
        `;
    }
    
    return bars;
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω
function showOfflineMessage() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    if (!document.querySelector('.offline-message')) {
        const offlineMessage = document.createElement('div');
        offlineMessage.className = 'offline-message';
        offlineMessage.innerHTML = `
            <div class="offline-icon">üîå</div>
            <h3>–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
            <p>–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.</p>
        `;
        
        mainContent.prepend(offlineMessage);
        
        setTimeout(() => {
            if (offlineMessage.parentNode) {
                offlineMessage.style.opacity = '0';
                setTimeout(() => offlineMessage.remove(), 300);
            }
        }, 10000);
    }
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function showErrorMessage(message) {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent || document.querySelector('.error-message')) return;

    const errorMessage = document.createElement('div');
    errorMessage.className = 'error-message';
    errorMessage.innerHTML = `
        <div class="error-icon">‚ö†Ô∏è</div>
        <h3>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
        <p>${message}</p>
        <button class="retry-btn" onclick="initRealTimeStats()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
    `;
    
    mainContent.prepend(errorMessage);
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
function animateCounter(element, target) {
    const duration = 1500;
    const start = parseInt(element.textContent) || 0;
    const startTime = performance.now();
    
    function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        const easeOut = 1 - Math.pow(1 - progress, 3);
        const current = Math.floor(start + (target - start) * easeOut);
        
        element.textContent = current.toLocaleString();
        
        if (progress < 1) {
            requestAnimationFrame(updateCounter);
        }
    }
    
    requestAnimationFrame(updateCounter);
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initAnimations() {
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('active');
            }
        });
    }, { threshold: 0.1 });

    document.querySelectorAll('.reveal').forEach(el => {
        observer.observe(el);
    });
}

function initServerStats() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
}

function initOnlineStats() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
}

function initRaceCards() {
    const raceCards = document.querySelectorAll('.race-card');
    
    raceCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            const race = this.getAttribute('data-race');
            playRaceSound(race);
        });

        card.addEventListener('click', function() {
            const race = this.getAttribute('data-race');
            showRaceModal(race);
        });
    });
}

// –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –≠–§–§–ï–ö–¢ –ö–£–†–°–û–†–ê –í –°–¢–ò–õ–ï GENSHIN IMPACT
function initUltimateGenshinCursor() {
    // –ü–û–õ–ù–û–ï –ë–õ–û–ö–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –°–¢–ê–ù–î–ê–†–¢–ù–´–• –ö–£–†–°–û–†–û–í –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û
    const disableAllCursors = () => {
        const styles = `
            * {
                cursor: none !important;
                caret-color: transparent !important;
            }
            
            *:hover {
                cursor: none !important;
            }
            
            html, body, div, span, applet, object, iframe,
            h1, h2, h3, h4, h5, h6, p, blockquote, pre,
            a, abbr, acronym, address, big, cite, code,
            del, dfn, em, img, ins, kbd, q, s, samp,
            small, strike, strong, sub, sup, tt, var,
            b, u, i, center,
            dl, dt, dd, ol, ul, li,
            fieldset, form, label, legend,
            table, caption, tbody, tfoot, thead, tr, th, td,
            article, aside, canvas, details, embed, 
            figure, figcaption, footer, header, hgroup, 
            menu, nav, output, ruby, section, summary,
            time, mark, audio, video {
                cursor: none !important;
            }
            
            input, textarea, [contenteditable] {
                cursor: none !important;
            }
            
            button, select, a {
                cursor: none !important;
            }
            
            ::selection {
                background: rgba(255, 215, 0, 0.3) !important;
            }
            
            ::-webkit-scrollbar {
                display: none !important;
            }
            
            *::-webkit-scursor {
                display: none !important;
            }
        `;
        const styleSheet = document.createElement('style');
        styleSheet.textContent = styles;
        document.head.appendChild(styleSheet);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JavaScript
        document.addEventListener('mouseover', (e) => {
            e.target.style.cursor = 'none !important';
        });
        
        document.addEventListener('mousedown', (e) => {
            e.target.style.cursor = 'none !important';
        });
    };

    disableAllCursors();

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞
    const createCursorLayer = (className, content, styles) => {
        const layer = document.createElement('div');
        layer.className = `genshin-cursor-${className}`;
        if (content) layer.innerHTML = content;
        layer.style.cssText = styles;
        document.body.appendChild(layer);
        return layer;
    };

    // –≠–ª–µ–º–µ–Ω—Ç—ã Genshin Impact —Å –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    const elements = {
        anemo: { 
            colors: ['#80FFD7', '#00D8A0', '#00A885'], 
            symbol: 'images/elements/anemo.png',
            icon: 'üå™Ô∏è'
        },
        pyro: { 
            colors: ['#FF9999', '#FF6B6B', '#FF4757'], 
            symbol: 'images/elements/pyro.png',
            icon: 'üî•'
        },
        electro: { 
            colors: ['#D9AFFF', '#B366FF', '#8C42FF'], 
            symbol: 'images/elements/electro.png',
            icon: '‚ö°'
        },
        hydro: { 
            colors: ['#87CEFA', '#4A90E2', '#357ABD'], 
            symbol: 'images/elements/hydro.png',
            icon: 'üíß'
        },
        geo: { 
            colors: ['#FFD166', '#FFB347', '#FF9500'], 
            symbol: 'images/elements/geo.png',
            icon: '‚õ∞Ô∏è'
        },
        cryo: { 
            colors: ['#A0D2FF', '#6BA8FF', '#4A7DFF'], 
            symbol: 'images/elements/cryo.png',
            icon: '‚ùÑÔ∏è'
        },
        dendro: { 
            colors: ['#A8E6CF', '#7EDFA0', '#5CDB95'], 
            symbol: 'images/elements/dendro.png',
            icon: 'üçÉ'
        }
    };

    // –û—Å–Ω–æ–≤–Ω–æ–π –∫—É—Ä—Å–æ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const mainCursor = createCursorLayer('main', '', `
        position: fixed;
        width: 32px;
        height: 32px;
        background: url('images/cursor/genshin-cursor.png') center/contain no-repeat;
        pointer-events: none;
        z-index: 10000;
        transition: all 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        mix-blend-mode: screen;
        user-select: none;
        filter: 
            drop-shadow(0 0 10px rgba(255, 215, 0, 0.8))
            drop-shadow(0 0 20px rgba(255, 140, 0, 0.6))
            brightness(1.1);
    `);

    // –ê—É—Ä–∞ –∫—É—Ä—Å–æ—Ä–∞
    const cursorAura = createCursorLayer('aura', '', `
        position: fixed;
        width: 50px;
        height: 50px;
        border: 2px solid rgba(255, 215, 0, 0.8);
        border-radius: 50%;
        pointer-events: none;
        z-index: 9999;
        transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        box-shadow: 
            0 0 30px rgba(255, 140, 0, 0.6),
            inset 0 0 20px rgba(255, 215, 0, 0.3);
        opacity: 0.8;
        background: radial-gradient(circle, transparent 30%, rgba(255, 215, 0, 0.1) 100%);
    `);

    // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
    const cursorGlow = createCursorLayer('glow', '', `
        position: fixed;
        width: 70px;
        height: 70px;
        border-radius: 50%;
        pointer-events: none;
        z-index: 9998;
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        background: radial-gradient(circle, rgba(255, 215, 0, 0.4) 0%, transparent 70%);
        opacity: 0.6;
        filter: blur(5px);
    `);

    // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    let trailParticles = [];
    let elementalOrbs = [];
    let sparkleEffects = [];
    const MAX_TRAILS = 12;
    const MAX_ORBS = 20;
    const MAX_SPARKLES = 8;

    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü—ã —Å–ª–µ–¥–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    function createTrailParticle(x, y, velocityMultiplier = 1) {
        const elementKeys = Object.keys(elements);
        const randomElement = elementKeys[Math.floor(Math.random() * elementKeys.length)];
        const element = elements[randomElement];
        
        const particle = document.createElement('div');
        const size = 6 + Math.random() * 8;
        const rotation = Math.random() * 360;
        
        // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –º–µ–∂–¥—É –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∏ –∏–∫–æ–Ω–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç–∞
        const useIcon = Math.random() > 0.5;
        
        if (useIcon) {
            particle.style.cssText = `
                position: fixed;
                width: ${size}px;
                height: ${size}px;
                background: url('${element.symbol}') center/contain no-repeat;
                border-radius: ${Math.random() > 0.7 ? '30%' : '50%'};
                pointer-events: none;
                z-index: 9997;
                opacity: ${0.7 + Math.random() * 0.3};
                filter: 
                    drop-shadow(0 0 8px ${element.colors[2]})
                    brightness(1.2);
                transform: scale(1) rotate(${rotation}deg);
                left: ${x}px;
                top: ${y}px;
            `;
        } else {
            particle.style.cssText = `
                position: fixed;
                width: ${size}px;
                height: ${size}px;
                background: radial-gradient(circle, ${element.colors[0]} 0%, ${element.colors[1]} 70%);
                border-radius: ${Math.random() > 0.7 ? '30%' : '50%'};
                pointer-events: none;
                z-index: 9997;
                opacity: ${0.7 + Math.random() * 0.3};
                box-shadow: 0 0 ${10 + Math.random() * 10}px ${element.colors[2]};
                transform: scale(1) rotate(${rotation}deg);
                left: ${x}px;
                top: ${y}px;
                filter: blur(${Math.random() > 0.5 ? '1px' : '0px'});
            `;
        }
        
        particle.physData = {
            x: x,
            y: y,
            vx: (Math.random() - 0.5) * 6 * velocityMultiplier,
            vy: (Math.random() - 0.5) * 6 * velocityMultiplier - 2,
            life: 0,
            maxLife: 800 + Math.random() * 400,
            rotation: rotation,
            rotationSpeed: (Math.random() - 0.5) * 10,
            scale: 1,
            element: randomElement,
            isIcon: useIcon
        };
        
        document.body.appendChild(particle);
        trailParticles.push(particle);
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if (trailParticles.length > MAX_TRAILS) {
            const oldParticle = trailParticles.shift();
            oldParticle?.remove();
        }
        
        return particle;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    function createElementalOrb(x, y, elementType = null) {
        const elementKeys = Object.keys(elements);
        const elementName = elementType || elementKeys[Math.floor(Math.random() * elementKeys.length)];
        const element = elements[elementName];
        const size = 20 + Math.random() * 15;
        
        const orb = document.createElement('div');
        orb.style.cssText = `
            position: fixed;
            width: ${size}px;
            height: ${size}px;
            background: url('${element.symbol}') center/contain no-repeat;
            pointer-events: none;
            z-index: 9996;
            opacity: 0.9;
            filter: 
                drop-shadow(0 0 10px ${element.colors[1]})
                drop-shadow(0 0 20px ${element.colors[2]})
                brightness(1.2);
            left: ${x}px;
            top: ${y}px;
            transition: opacity 0.3s ease;
        `;
        
        orb.physData = {
            x: x,
            y: y,
            vx: (Math.random() - 0.5) * 12,
            vy: (Math.random() - 0.5) * 12 - 6,
            life: 0,
            maxLife: 1500 + Math.random() * 700,
            scale: 1,
            element: elementName
        };
        
        document.body.appendChild(orb);
        elementalOrbs.push(orb);
        
        if (elementalOrbs.length > MAX_ORBS) {
            const oldOrb = elementalOrbs.shift();
            oldOrb?.remove();
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–µ—Å—Ç–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    function createSparkle(x, y) {
        const sparkleTypes = [
            'images/effects/sparkle1.png',
            'images/effects/sparkle2.png',
            'images/effects/sparkle3.png',
            'images/effects/star.png',
            'images/effects/glitter.png'
        ];
        
        const sparkle = document.createElement('div');
        const sparkleType = sparkleTypes[Math.floor(Math.random() * sparkleTypes.length)];
        const size = 8 + Math.random() * 12;
        
        sparkle.style.cssText = `
            position: fixed;
            width: ${size}px;
            height: ${size}px;
            background: url('${sparkleType}') center/contain no-repeat;
            pointer-events: none;
            z-index: 9995;
            opacity: ${0.8 + Math.random() * 0.2};
            filter: drop-shadow(0 0 8px gold) brightness(1.3);
            left: ${x}px;
            top: ${y}px;
            transition: all 0.5s ease;
        `;
        
        sparkle.physData = {
            x: x,
            y: y,
            life: 0,
            maxLife: 400 + Math.random() * 200,
            scale: 0.5 + Math.random() * 0.5
        };
        
        document.body.appendChild(sparkle);
        sparkleEffects.push(sparkle);
        
        if (sparkleEffects.length > MAX_SPARKLES) {
            const oldSparkle = sparkleEffects.shift();
            oldSparkle?.remove();
        }
    }

    // –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å requestAnimationFrame
    function animateAllEffects() {
        const now = Date.now();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è trail —á–∞—Å—Ç–∏—Ü
        trailParticles.forEach((particle, index) => {
            const data = particle.physData;
            data.life += 16; // ~60fps
            
            if (data.life >= data.maxLife) {
                particle.remove();
                trailParticles.splice(index, 1);
            } else {
                const progress = data.life / data.maxLife;
                
                // –§–∏–∑–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
                data.x += data.vx;
                data.y += data.vy;
                data.vy += 0.1; // –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
                data.rotation += data.rotationSpeed;
                data.scale = 1 - progress * 0.7;
                
                // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
                particle.style.opacity = 0.8 * (1 - progress);
                particle.style.transform = `scale(${data.scale}) rotate(${data.rotation}deg)`;
                particle.style.left = `${data.x}px`;
                particle.style.top = `${data.y}px`;
            }
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å—Ñ–µ—Ä
        elementalOrbs.forEach((orb, index) => {
            const data = orb.physData;
            data.life += 16;
            
            if (data.life >= data.maxLife) {
                orb.remove();
                elementalOrbs.splice(index, 1);
            } else {
                const progress = data.life / data.maxLife;
                
                data.x += data.vx;
                data.y += data.vy;
                data.vy += 0.05;
                data.vx *= 0.98; // —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
                data.vy *= 0.98;
                data.scale = 1 + progress * 0.5;
                
                orb.style.opacity = 0.9 * (1 - progress);
                orb.style.transform = `scale(${data.scale})`;
                orb.style.left = `${data.x}px`;
                orb.style.top = `${data.y}px`;
            }
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –±–ª–µ—Å—Ç–æ–∫
        sparkleEffects.forEach((sparkle, index) => {
            const data = sparkle.physData;
            data.life += 16;
            
            if (data.life >= data.maxLife) {
                sparkle.remove();
                sparkleEffects.splice(index, 1);
            } else {
                const progress = data.life / data.maxLife;
                sparkle.style.opacity = data.scale * (1 - progress);
                sparkle.style.transform = `scale(${data.scale * (1 - progress)}) rotate(${progress * 360}deg)`;
            }
        });
        
        requestAnimationFrame(animateAllEffects);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    let mouseX = 0, mouseY = 0;
    let lastX = 0, lastY = 0;
    let velocity = 0;
    let isInteracting = false;
    let trailCooldown = 0;

    const updateCursorPosition = (x, y) => {
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞
        mainCursor.style.left = `${x - 16}px`;
        mainCursor.style.top = `${y - 16}px`;
        
        // –ü–ª–∞–≤–Ω–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞—É—Ä—ã –∏ —Å–≤–µ—á–µ–Ω–∏—è
        const auraX = parseFloat(cursorAura.style.left) || x - 25;
        const auraY = parseFloat(cursorAura.style.top) || y - 25;
        
        cursorAura.style.left = `${auraX + (x - 25 - auraX) * 0.3}px`;
        cursorAura.style.top = `${auraY + (y - 25 - auraY) * 0.3}px`;
        
        cursorGlow.style.left = `${auraX + (x - 35 - auraX) * 0.2}px`;
        cursorGlow.style.top = `${auraY + (y - 35 - auraY) * 0.2}px`;
        
        // –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        const deltaX = x - lastX;
        const deltaY = y - lastY;
        velocity = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–µ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (velocity > 2 && trailCooldown <= 0) {
            const intensity = Math.min(velocity / 10, 3);
            createTrailParticle(x, y, intensity);
            
            // –°–ª—É—á–∞–π–Ω—ã–µ –±–ª–µ—Å—Ç–∫–∏ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
            if (Math.random() < velocity * 0.01) {
                createSparkle(x, y);
            }
            
            trailCooldown = Math.max(1, 4 - intensity);
        }
        
        lastX = x;
        lastY = y;
        if (trailCooldown > 0) trailCooldown--;
    };

    document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
        updateCursorPosition(mouseX, mouseY);
    });

    // –≠–ø–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –∫–ª–∏–∫–µ
    document.addEventListener('mousedown', (e) => {
        isInteracting = true;
        
        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        mainCursor.style.transform = 'scale(1.8)';
        mainCursor.style.filter = 'drop-shadow(0 0 15px rgba(255, 215, 0, 0.9)) drop-shadow(0 0 30px rgba(255, 140, 0, 0.8)) brightness(1.3)';
        cursorAura.style.transform = 'scale(1.5)';
        cursorAura.style.borderColor = 'rgba(255, 69, 0, 0.9)';
        cursorAura.style.boxShadow = '0 0 50px rgba(255, 69, 0, 0.8)';
        cursorGlow.style.transform = 'scale(1.8)';
        cursorGlow.style.opacity = '0.8';
        
        // –í–∑—Ä—ã–≤ —ç–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å—Ñ–µ—Ä
        for (let i = 0; i < 12; i++) {
            setTimeout(() => {
                createElementalOrb(e.clientX, e.clientY);
            }, i * 30);
        }
        
        // –í–æ–ª–Ω–∞ –±–ª–µ—Å—Ç–æ–∫
        for (let i = 0; i < 6; i++) {
            setTimeout(() => createSparkle(e.clientX, e.clientY), i * 50);
        }
    });

    document.addEventListener('mouseup', () => {
        isInteracting = false;
        resetCursorAppearance();
    });

    function resetCursorAppearance() {
        mainCursor.style.transform = 'scale(1)';
        mainCursor.style.filter = 'drop-shadow(0 0 10px rgba(255, 215, 0, 0.8)) drop-shadow(0 0 20px rgba(255, 140, 0, 0.6)) brightness(1.1)';
        cursorAura.style.transform = 'scale(1)';
        cursorAura.style.borderColor = 'rgba(255, 215, 0, 0.8)';
        cursorAura.style.boxShadow = '0 0 30px rgba(255, 140, 0, 0.6)';
        cursorGlow.style.transform = 'scale(1)';
        cursorGlow.style.opacity = '0.6';
    }

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    document.addEventListener('mouseover', (e) => {
        if (e.target.matches('a, button, [role="button"], input, select, textarea, [onclick]')) {
            mainCursor.style.transform = 'scale(1.4)';
            mainCursor.style.filter = 'drop-shadow(0 0 12px rgba(255, 107, 107, 0.9)) drop-shadow(0 0 25px rgba(255, 69, 0, 0.7)) brightness(1.2)';
            cursorAura.style.borderColor = 'rgba(255, 107, 107, 0.9)';
            cursorAura.style.boxShadow = '0 0 40px rgba(255, 107, 107, 0.7)';
        }
    });

    document.addEventListener('mouseout', (e) => {
        if (e.target.matches('a, button, [role="button"], input, select, textarea, [onclick]')) {
            if (!isInteracting) resetCursorAppearance();
        }
    });

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Å–∫—Ä–æ–ª–ª—É
    window.addEventListener('scroll', () => {
        updateCursorPosition(mouseX, mouseY);
    });

    // –í–∏–¥–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ—Ä–∞
    document.addEventListener('mouseleave', () => {
        mainCursor.style.opacity = '0';
        cursorAura.style.opacity = '0';
        cursorGlow.style.opacity = '0';
    });

    document.addEventListener('mouseenter', () => {
        mainCursor.style.opacity = '1';
        cursorAura.style.opacity = '0.8';
        cursorGlow.style.opacity = '0.6';
    });

    // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    animateAllEffects();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    setInterval(() => {
        if (Math.random() < 0.3) {
            createElementalOrb(mouseX + (Math.random() - 0.5) * 100, mouseY + (Math.random() - 0.5) * 100);
        }
    }, 2000);

    console.log('üéÆ‚ú® –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –≠–§–§–ï–ö–¢ –ö–£–†–°–û–†–ê GENSHIN IMPACT –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initUltimateGenshinCursor);
} else {
    initUltimateGenshinCursor();
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
setInterval(() => {
    console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    initRealTimeStats();
}, 60000);

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('refresh-stats')) {
        e.preventDefault();
        initRealTimeStats();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ServerStats = {
    refresh: initRealTimeStats,
    getConfig: () => SERVER_CONFIG,
    getAPI: () => serverAPI,
    getPlayersManager: () => playersManager
};