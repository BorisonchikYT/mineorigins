// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞ Minecraft
document.addEventListener('DOMContentLoaded', function() {
    initAnimations();
    initServerStats();
    initOnlineStats();
    initRaceCards();
    initCursorEffect();
    initScrollAnimations();
    initTypewriterEffect();
    initRealTimeStats();
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const SERVER_CONFIG = {
    primaryIP: 'f27.joinserver.xyz:25835',
    numericIP: '95.216.92.76:25835',
    version: '1.21.1 Fabric',
    apiEndpoints: {
        status: 'https://api.mcsrvstat.us/3/95.216.92.76:25835',
        ping: 'https://api.mcsrvstat.us/debug/ping/95.216.92.76:25835',
        backup: 'https://api.mcsrvstat.us/2/95.216.92.76:25835'
    }
};

// –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function initRealTimeStats() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        updateServerStatus('loading', '–ó–∞–≥—Ä—É–∑–∫–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
        const serverData = await fetchRealServerData();
        
        if (serverData.online) {
            updateServerStatus('online', '–û–ù–õ–ê–ô–ù');
            updatePlayerCount(serverData.players.online);
            updateOnlinePlayers(serverData.players.list || []);
            updateServerInfo(serverData);
            updateServerChart(serverData);
        } else {
            updateServerStatus('offline', '–û–§–§–õ–ê–ô–ù');
            updatePlayerCount(0);
            showOfflineMessage();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        updateServerStatus('error', '–û–®–ò–ë–ö–ê');
        // –ü—Ä–æ–±—É–µ–º backup API
        try {
            const backupData = await fetchBackupServerData();
            if (backupData.online) {
                updateServerStatus('online', '–û–ù–õ–ê–ô–ù');
                updatePlayerCount(backupData.players.online);
            }
        } catch (backupError) {
            console.error('Backup API —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', backupError);
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
async function fetchRealServerData() {
    try {
        console.log('üîÑ –ó–∞–ø—Ä–æ—Å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API...');
        const response = await fetch(SERVER_CONFIG.apiEndpoints.status, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'User-Agent': 'MineOrigins-Website/1.0'
            },
            timeout: 10000
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã:', data);

        return {
            online: data.online || false,
            players: {
                online: data.players?.online || 0,
                max: data.players?.max || 0,
                list: data.players?.list || []
            },
            version: data.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            motd: data.motd?.clean ? data.motd.clean[0] : 'Minecraft Origins Server',
            hostname: data.hostname || SERVER_CONFIG.primaryIP,
            port: data.port || 25835
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API:', error);
        // –ü—Ä–æ–±—É–µ–º ping API –∫–∞–∫ fallback
        return await fetchPingData();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ping API
async function fetchPingData() {
    try {
        console.log('üîÑ –ó–∞–ø—Ä–æ—Å –∫ Ping API...');
        const response = await fetch(SERVER_CONFIG.apiEndpoints.ping, {
            method: 'GET',
            timeout: 8000
        });

        if (!response.ok) throw new Error('Ping API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

        const data = await response.json();
        console.log('‚úÖ Ping –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);

        return {
            online: data.online || false,
            players: {
                online: data.players?.online || 0,
                max: data.players?.max || 0,
                list: []
            },
            version: data.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            motd: data.description?.text || 'Minecraft Origins Server'
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Ping API:', error);
        throw error;
    }
}

// Backup API –∑–∞–ø—Ä–æ—Å
async function fetchBackupServerData() {
    try {
        console.log('üîÑ –ó–∞–ø—Ä–æ—Å –∫ backup API...');
        const response = await fetch(SERVER_CONFIG.apiEndpoints.backup);
        
        if (!response.ok) throw new Error('Backup API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        
        const data = await response.json();
        return {
            online: data.online || false,
            players: {
                online: data.players?.online || 0,
                max: data.players?.max || 0
            },
            version: data.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        };
    } catch (error) {
        console.error('‚ùå –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', error);
        return {
            online: false,
            players: { online: 0, max: 0 },
            version: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        };
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
function updateServerStatus(status, text) {
    const statusIndicator = document.querySelector('.status-indicator');
    const statusText = document.querySelector('.status-text');
    
    if (statusIndicator && statusText) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
        statusIndicator.className = 'status-indicator';
        statusIndicator.classList.add(status);
        statusText.textContent = text;

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        statusIndicator.style.animation = 'pulse 0.5s ease-in-out';
        setTimeout(() => statusIndicator.style.animation = '', 500);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    const navStatus = document.querySelector('.server-status .status-indicator');
    const navText = document.querySelector('.server-status .status-text');
    if (navStatus && navText) {
        navStatus.className = 'status-indicator ' + status;
        navText.textContent = text;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
function updatePlayerCount(count) {
    const playerCount = document.querySelector('.player-count');
    const statNumbers = document.querySelectorAll('.stat-number[data-target]');
    
    if (playerCount) {
        playerCount.textContent = count;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        playerCount.style.transform = 'scale(1.2)';
        setTimeout(() => playerCount.style.transform = 'scale(1)', 300);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
    statNumbers.forEach(stat => {
        const target = parseInt(stat.getAttribute('data-target'));
        if (target > 0) {
            animateCounter(stat, count);
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –æ–Ω–ª–∞–π–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    updateOnlineProgress(count);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ –æ–Ω–ª–∞–π–Ω–∞
function updateOnlineProgress(onlineCount) {
    const progressBar = document.querySelector('.online-progress');
    const maxPlayers = 200; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    
    if (progressBar) {
        const percentage = Math.min((onlineCount / maxPlayers) * 100, 100);
        progressBar.style.width = percentage + '%';
        
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
        if (percentage > 80) {
            progressBar.style.background = 'var(--hell-color)';
        } else if (percentage > 50) {
            progressBar.style.background = 'var(--earth-color)';
        } else {
            progressBar.style.background = 'var(--heaven-color)';
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
function updateOnlinePlayers(players) {
    const onlineList = document.getElementById('onlineList');
    if (!onlineList) return;

    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (players.length > 0) {
        onlineList.innerHTML = '';
        
        players.slice(0, 15).forEach(player => { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 –∏–≥—Ä–æ–∫–æ–≤
            const playerElement = document.createElement('div');
            playerElement.className = 'online-player';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—É –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ
            const race = determinePlayerRace(player);
            
            playerElement.innerHTML = `
                <div class="player-avatar ${race}">${getRaceEmoji(race)}</div>
                <div class="player-info">
                    <div class="player-name">${player}</div>
                    <div class="player-race">${getRaceName(race)}</div>
                </div>
            `;
            onlineList.appendChild(playerElement);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        if (players.length > 15) {
            const moreElement = document.createElement('div');
            moreElement.className = 'online-player more-players';
            moreElement.innerHTML = `
                <div class="player-avatar more">+${players.length - 15}</div>
                <div class="player-info">
                    <div class="player-name">–∏ –¥—Ä—É–≥–∏–µ...</div>
                    <div class="player-race">–≤—Å–µ–≥–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤</div>
                </div>
            `;
            onlineList.appendChild(moreElement);
        }
    } else {
        onlineList.innerHTML = `
            <div class="no-players">
                <div class="no-players-icon">üë•</div>
                <div class="no-players-text">–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω</div>
            </div>
        `;
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—ã –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏
function determinePlayerRace(playerName) {
    const races = ['hell', 'heaven', 'earth'];
    
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
    if (playerName.toLowerCase().includes('nether') || 
        playerName.toLowerCase().includes('fire') ||
        playerName.toLowerCase().includes('demon')) {
        return 'hell';
    } else if (playerName.toLowerCase().includes('sky') ||
               playerName.toLowerCase().includes('angel') ||
               playerName.toLowerCase().includes('wing')) {
        return 'heaven';
    } else if (playerName.toLowerCase().includes('earth') ||
               playerName.toLowerCase().includes('stone') ||
               playerName.toLowerCase().includes('forest')) {
        return 'earth';
    }
    
    // –°–ª—É—á–∞–π–Ω–∞—è —Ä–∞—Å–∞ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    return races[Math.floor(Math.random() * races.length)];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ emoji –¥–ª—è —Ä–∞—Å—ã
function getRaceEmoji(race) {
    const emojis = {
        hell: 'üî•',
        heaven: 'üëº',
        earth: 'üåç'
    };
    return emojis[race] || 'üë§';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
function updateServerInfo(serverData) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const serverInfoElements = document.querySelectorAll('.server-info, .server-ip, .server-version');
    
    serverInfoElements.forEach(element => {
        if (element.classList.contains('server-ip')) {
            element.textContent = SERVER_CONFIG.primaryIP;
        } else if (element.classList.contains('server-version')) {
            element.textContent = serverData.version;
        } else {
            element.innerHTML = `
                <strong>IP:</strong> ${SERVER_CONFIG.primaryIP}<br>
                <strong>–í–µ—Ä—Å–∏—è:</strong> ${serverData.version}<br>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status-${serverData.online ? 'online' : 'offline'}">${serverData.online ? '–û–ù–õ–ê–ô–ù' : '–û–§–§–õ–ê–ô–ù'}</span>
            `;
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º MOTD –µ—Å–ª–∏ –µ—Å—Ç—å
    const motdElement = document.querySelector('.server-motd');
    if (motdElement && serverData.motd) {
        motdElement.textContent = serverData.motd;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–Ω–ª–∞–π–Ω–∞
function updateServerChart(serverData) {
    const chartContainer = document.querySelector('.online-chart');
    if (!chartContainer) return;

    const currentOnline = serverData.players.online;
    const maxPlayers = serverData.players.max || 200;

    chartContainer.innerHTML = `
        <div class="chart-real-time">
            <div class="chart-header">
                <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω–∞</h4>
                <div class="current-online">
                    <span class="online-count">${currentOnline}</span>
                    <span class="online-max">/${maxPlayers}</span>
                    <span class="online-text">–∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω</span>
                </div>
            </div>
            <div class="chart-progress">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${(currentOnline / maxPlayers) * 100}%"></div>
                </div>
            </div>
            <div class="chart-history">
                ${generateHistoryBars(currentOnline, maxPlayers)}
            </div>
        </div>
    `;

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        const bars = chartContainer.querySelectorAll('.history-bar');
        bars.forEach((bar, index) => {
            setTimeout(() => {
                bar.style.opacity = '1';
                bar.style.transform = 'scaleY(1)';
            }, index * 100);
        });
    }, 500);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function generateHistoryBars(currentOnline, maxPlayers) {
    let bars = '';
    const hours = 12; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 12 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–∞—Å–æ–≤
    
    for (let i = 0; i < hours; i++) {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
        const baseOnline = currentOnline * (0.7 + Math.random() * 0.6);
        const height = Math.max(10, Math.min(100, (baseOnline / maxPlayers) * 100));
        
        const time = new Date();
        time.setHours(time.getHours() - (hours - i - 1));
        const timeLabel = time.getHours().toString().padStart(2, '0') + ':00';
        
        bars += `
            <div class="history-bar-container">
                <div class="history-bar" style="height: ${height}%"></div>
                <span class="history-time">${timeLabel}</span>
            </div>
        `;
    }
    
    return bars;
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω
function showOfflineMessage() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!document.querySelector('.offline-message')) {
        const offlineMessage = document.createElement('div');
        offlineMessage.className = 'offline-message';
        offlineMessage.innerHTML = `
            <div class="offline-icon">üîå</div>
            <h3>–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
            <p>–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.</p>
            <button onclick="initRealTimeStats()" class="retry-btn">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
        `;
        
        mainContent.prepend(offlineMessage);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (offlineMessage.parentNode) {
                offlineMessage.style.opacity = '0';
                setTimeout(() => offlineMessage.remove(), 300);
            }
        }, 10000);
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
function animateCounter(element, target) {
    const duration = 1500;
    const start = parseInt(element.textContent) || 0;
    const startTime = performance.now();
    
    function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // easing function
        const easeOut = 1 - Math.pow(1 - progress, 3);
        const current = Math.floor(start + (target - start) * easeOut);
        
        element.textContent = current.toLocaleString();
        
        if (progress < 1) {
            requestAnimationFrame(updateCounter);
        }
    }
    
    requestAnimationFrame(updateCounter);
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function initAnimations() {
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('active');
            }
        });
    }, { threshold: 0.1 });

    document.querySelectorAll('.reveal').forEach(el => {
        observer.observe(el);
    });
}

function initServerStats() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
}

function initOnlineStats() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
}

function initRaceCards() {
    const raceCards = document.querySelectorAll('.race-card');
    
    raceCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            const race = this.getAttribute('data-race');
            playRaceSound(race);
        });

        card.addEventListener('click', function() {
            const race = this.getAttribute('data-race');
            showRaceModal(race);
        });
    });
}

function playRaceSound(race) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤ —Ä–∞—Å...
}

function showRaceModal(race) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–∞—Å...
}

function initCursorEffect() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫—É—Ä—Å–æ—Ä–∞...
}

function initScrollAnimations() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π —Å–∫—Ä–æ–ª–ª–∞...
}

function initTypewriterEffect() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–∏...
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function getRaceName(race) {
    const races = {
        hell: '–î–µ–º–æ–Ω—ã',
        heaven: '–ê–Ω–≥–µ–ª—ã',
        earth: '–ó–µ–º–Ω—ã–µ'
    };
    return races[race] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
setInterval(() => {
    console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    initRealTimeStats();
}, 60000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('refresh-stats')) {
        e.preventDefault();
        initRealTimeStats();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ServerStats = {
    refresh: initRealTimeStats,
    getConfig: () => SERVER_CONFIG
};