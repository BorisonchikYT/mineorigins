// service-worker.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
const CACHE_NAME = 'mineorigins-optimized-v1.3.0';
const STATIC_CACHE = 'static-v1';
const DYNAMIC_CACHE = 'dynamic-v1';

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
const CRITICAL_URLS = [
    '/',
    '/index.html',
    '/players.html',
    '/settlements.html', 
    '/gallery.html',
    '/faq.html',
    '/assets/images/MineOrigins.png',
    '/assets/images/world-map.png',
    '/assets/images/icons/index_icon_house.png',
    '/assets/images/icons/index_icon_players.gif',
    '/assets/images/icons/index_icon_settlements.gif',
    '/assets/images/icons/index_icon_gallery.gif',
    '/assets/images/icons/icon_discord.gif',
    '/assets/images/icons/icon_telegram.gif',
    '/assets/images/icons/icon_demon.gif',
    '/assets/images/icons/icon_angel.gif',
    '/assets/images/icons/icon_terrestrial.gif',
    '/assets/images/icons/icon_search.gif',
    '/assets/images/gallery/nature/osfon1.jpg',
    '/assets/images/gallery/builds/build1.jpg',
    '/assets/images/gallery/events/event1.png'
];

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
const STATIC_URLS = [
  '/assets/css/index.css',
  '/assets/css/players.css',
  '/assets/css/settlements.css',
  '/assets/css/gallery.css',
  '/assets/css/faq.css',
  '/assets/js/main.js',
  '/assets/js/players.js',
  '/assets/js/s2.js',
  '/assets/js/gallery.js',
  '/assets/js/faq.js',
  '/assets/images/world-map.png'
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ - –∫—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
self.addEventListener('install', (event) => {
  console.log('üîÑ Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)...');
  
  event.waitUntil(
    caches.open(CRITICAL_CACHE)
      .then((cache) => {
        console.log('üöÄ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...');
        return cache.addAll(CRITICAL_URLS);
      })
      .then(() => {
        console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
        return self.skipWaiting();
      })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
self.addEventListener('activate', (event) => {
  console.log('üî• Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME && 
              cacheName !== CRITICAL_CACHE && 
              cacheName !== STATIC_CACHE) {
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      return self.clients.claim();
    })
  );
});

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: Network First –¥–ª—è HTML, Cache First –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏
self.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏ POST-–∑–∞–ø—Ä–æ—Å—ã
  if (!url.origin.startsWith(self.location.origin) || event.request.method !== 'GET') {
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then((cachedResponse) => {
        // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ - Cache First
        if (event.request.destination === 'image' || 
            event.request.destination === 'style' ||
            event.request.destination === 'script' ||
            url.pathname.includes('/assets/')) {
          
          if (cachedResponse) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ —Ñ–æ–Ω–µ
            fetchAndCache(event.request);
            return cachedResponse;
          }
          
          return fetchAndCache(event.request);
        }
        
        // –î–ª—è HTML - Network First
        return fetch(event.request)
          .then((networkResponse) => {
            // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if (networkResponse.status === 200) {
              const responseClone = networkResponse.clone();
              caches.open(CACHE_NAME)
                .then((cache) => cache.put(event.request, responseClone));
            }
            return networkResponse;
          })
          .catch(() => {
            // Fallback to cache
            return cachedResponse || new Response('–û—Ñ—Ñ–ª–∞–π–Ω', {
              status: 503,
              headers: { 'Content-Type': 'text/plain' }
            });
          });
      })
  );
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
function fetchAndCache(request) {
  return fetch(request)
    .then((networkResponse) => {
      if (networkResponse.status === 200) {
        const responseClone = networkResponse.clone();
        caches.open(CACHE_NAME)
          .then((cache) => cache.put(request, responseClone));
      }
      return networkResponse;
    })
    .catch(() => {
      return caches.match(request)
        .then((cachedResponse) => {
          return cachedResponse || new Response('–†–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', {
            status: 404,
            headers: { 'Content-Type': 'text/plain' }
          });
        });
    });
}