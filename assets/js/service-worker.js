// service-worker.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è v2.0
const CACHE_VERSION = '2.0.0';
const CACHE_NAMES = {
  CRITICAL: `mineorigins-critical-v${CACHE_VERSION}`,
  STATIC: `mineorigins-static-v${CACHE_VERSION}`,
  DYNAMIC: `mineorigins-dynamic-v${CACHE_VERSION}`,
  IMAGES: `mineorigins-images-v${CACHE_VERSION}`
};

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
const CRITICAL_URLS = [
  '/',
  '/index.html',
  '/players.html',
  '/settlements.html', 
  '/gallery.html',
  '/faq.html',
  '/assets/css/index.css',
  '/assets/css/players.css',
  '/assets/css/settlements.css',
  '/assets/css/gallery.css',
  '/assets/css/faq.css',
  '/assets/js/main.js',
  '/manifest.json'
];

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
function registerServiceWorker() {
  if ('serviceWorker' in navigator) {
    const swUrl = '/service-worker.js'; // –¢–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–Ω–µ
    
    navigator.serviceWorker.register(swUrl, {
      scope: '/'
    })
    .then(registration => {
      // console.log('üéØ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è scope:', registration.scope);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        // console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker');
        
        newWorker.addEventListener('statechange', () => {
          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
            // console.log('üì¶ –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!');
            // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          }
        });
      });
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    navigator.serviceWorker.addEventListener('controllerchange', () => {
      // console.log('üîÑ Controller –∏–∑–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
      window.location.reload();
    });
  }
}

// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', registerServiceWorker);

// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', registerServiceWorker);
// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', registerServiceWorker);
// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã (–≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
const STATIC_URLS = [
  '/assets/js/players.js',
  '/assets/js/s2.js',
  '/assets/js/gallery.js',
  '/assets/js/faq.js',
  '/assets/images/MineOrigins.png',
  '/assets/images/world-map.png'
];

// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const PRELOAD_IMAGES = [
  '/assets/images/icons/index_icon_house.png',
  '/assets/images/icons/index_icon_players.gif',
  '/assets/images/icons/index_icon_settlements.gif',
  '/assets/images/icons/index_icon_gallery.gif',
  '/assets/images/icons/icon_discord.gif',
  '/assets/images/icons/icon_telegram.gif',
  '/assets/images/icons/icon_demon.gif',
  '/assets/images/icons/icon_angel.gif',
  '/assets/images/icons/icon_terrestrial.gif',
  '/assets/images/icons/icon_search.gif'
];

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º –∫–µ—à–µ
const MAX_DYNAMIC_ITEMS = 50;

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
self.addEventListener('install', (event) => {
  // console.log('üîÑ Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è v2)...');
  
  event.waitUntil(
    Promise.all([
      // –ö–µ—à–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
      caches.open(CACHE_NAMES.CRITICAL)
        .then(cache => cache.addAll(CRITICAL_URLS)),
      
      // –ö–µ—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
      caches.open(CACHE_NAMES.STATIC)
        .then(cache => cache.addAll(STATIC_URLS)),
      
      // –ö–µ—à–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      caches.open(CACHE_NAMES.IMAGES)
        .then(cache => cache.addAll(PRELOAD_IMAGES))
    ]).then(() => {
      // console.log('‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
      return self.skipWaiting();
    }).catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è - —É–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
self.addEventListener('activate', (event) => {
  // console.log('üî• Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è v2...');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–µ—à–∏, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
          if (!Object.values(CACHE_NAMES).includes(cacheName)) {
            // console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      // console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤');
      return self.clients.claim();
    })
  );
});

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã
  if (!url.origin.startsWith(self.location.origin) || request.method !== 'GET') {
    return;
  }

  // –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ - manifest.json
  if (url.pathname.endsWith('manifest.json')) {
    event.respondWith(
      caches.match(request).then(response => {
        return response || fetch(request).then(networkResponse => {
          const responseClone = networkResponse.clone();
          caches.open(CACHE_NAMES.STATIC)
            .then(cache => cache.put(request, responseClone));
          return networkResponse;
        });
      })
    );
    return;
  }

  // –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ - Network First
  if (url.pathname.includes('/api/')) {
    event.respondWith(networkFirstStrategy(request));
    return;
  }

  // –î–ª—è HTML - Stale-While-Revalidate
  if (request.destination === 'document') {
    event.respondWith(staleWhileRevalidateStrategy(request, CACHE_NAMES.CRITICAL));
    return;
  }

  // –î–ª—è CSS –∏ JS - Cache First —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  if (request.destination === 'style' || request.destination === 'script') {
    event.respondWith(cacheFirstStrategy(request, event, CACHE_NAMES.STATIC));
    return;
  }

  // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - Cache First —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
  if (request.destination === 'image') {
    event.respondWith(imageCacheStrategy(request));
    return;
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - Network First
  event.respondWith(networkFirstStrategy(request));
});

// –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

/**
 * Cache First - –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
 */
async function cacheFirstStrategy(request, event, cacheName) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(request);
  
  if (cachedResponse) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ —Ñ–æ–Ω–µ
    event.waitUntil(
      fetch(request).then(response => {
        if (response.status === 200) {
          return cache.put(request, response);
        }
      }).catch(() => { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */ })
    );
    return cachedResponse;
  }
  
  return fetchAndCache(request, cacheName);
}

/**
 * Network First - –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
async function networkFirstStrategy(request) {
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.status === 200) {
      const cache = await caches.open(CACHE_NAMES.DYNAMIC);
      await cache.put(request, networkResponse.clone());
      await cleanupDynamicCache(); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    }
    
    return networkResponse;
  } catch (error) {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // Fallback –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü
    if (request.destination === 'document') {
      return caches.match('/offline.html') || offlineResponse();
    }
    
    return offlineResponse();
  }
}

/**
 * Stale-While-Revalidate - –¥–ª—è HTML
 */
async function staleWhileRevalidateStrategy(request, cacheName) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(request);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ —Ñ–æ–Ω–µ
  const fetchPromise = fetch(request).then(networkResponse => {
    if (networkResponse.status === 200) {
      const responseClone = networkResponse.clone();
      caches.open(cacheName)
        .then(cache => cache.put(request, responseClone));
    }
    return networkResponse;
  }).catch(() => { 
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    return cachedResponse;
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –µ—Å—Ç—å
  return cachedResponse || fetchPromise;
}

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
 */
async function imageCacheStrategy(request) {
  const cache = await caches.open(CACHE_NAMES.IMAGES);
  const cachedResponse = await cache.match(request);
  
  if (cachedResponse) {
    return cachedResponse;
  }
  
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.status === 200) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      const keys = await cache.keys();
      if (keys.length < 100) { // –ú–∞–∫—Å–∏–º—É–º 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await cache.put(request, networkResponse.clone());
      }
    }
    return networkResponse;
  } catch (error) {
    const fallbackResponse = await caches.match(request);
    if (fallbackResponse) {
      return fallbackResponse;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π SVG –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return new Response(
      '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect width="100" height="100" fill="#f0f0f0"/><text x="50" y="50" text-anchor="middle" dy=".3em" font-family="Arial" font-size="10">No Image</text></svg>',
      { 
        status: 404, 
        headers: { 'Content-Type': 'image/svg+xml' } 
      }
    );
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞
 */
async function cleanupDynamicCache() {
  const cache = await caches.open(CACHE_NAMES.DYNAMIC);
  const keys = await cache.keys();
  
  if (keys.length > MAX_DYNAMIC_ITEMS) {
    await cache.delete(keys[0]); // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
  }
}

/**
 * –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function fetchAndCache(request, cacheName) {
  try {
    const response = await fetch(request);
    if (response.status === 200) {
      const cache = await caches.open(cacheName);
      await cache.put(request, response.clone());
    }
    return response;
  } catch (error) {
    const cachedResponse = await caches.match(request);
    return cachedResponse || offlineResponse();
  }
}

/**
 * –û—Ñ—Ñ–ª–∞–π–Ω –æ—Ç–≤–µ—Ç
 */
function offlineResponse() {
  return new Response(
    `
    <!DOCTYPE html>
    <html>
    <head>
        <title>–û—Ñ—Ñ–ª–∞–π–Ω - MineOrigins</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            .offline { color: #666; }
        </style>
    </head>
    <body>
        <div class="offline">
            <h1>üì∂ –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</h1>
            <p>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>
            <p>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
        </div>
    </body>
    </html>
    `,
    {
      status: 503,
      headers: { 
        'Content-Type': 'text/html; charset=utf-8',
        'Cache-Control': 'no-cache'
      }
    }
  );
}

// –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    // console.log('üîÑ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
    event.waitUntil(doBackgroundSync());
  }
});

async function doBackgroundSync() {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
  // console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
self.addEventListener('periodicsync', (event) => {
  if (event.tag === 'content-update') {
    // console.log('üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
    event.waitUntil(updateContent());
  }
});

async function updateContent() {
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –≤ —Ñ–æ–Ω–µ
  try {
    const cache = await caches.open(CACHE_NAMES.DYNAMIC);
    // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    // console.log('–ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–æ–Ω–µ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
  }
}

// –í —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ:
async function fetchWithTimeout(request, timeout = 5000) {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);
  
  try {
    const response = await fetch(request, { 
      signal: controller.signal 
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
}